{
  "version": 3,
  "sources": ["../../../../node_modules/@cropper/utils/dist/utils.esm.raw.js", "../../../../node_modules/@cropper/element/dist/element.esm.raw.js", "../../../../node_modules/@cropper/element-canvas/dist/element-canvas.esm.raw.js", "../../../../node_modules/@cropper/element-image/dist/element-image.esm.raw.js", "../../../../node_modules/@cropper/element-shade/dist/element-shade.esm.raw.js", "../../../../node_modules/@cropper/element-handle/dist/element-handle.esm.raw.js", "../../../../node_modules/@cropper/element-selection/dist/element-selection.esm.raw.js", "../../../../node_modules/@cropper/element-grid/dist/element-grid.esm.raw.js", "../../../../node_modules/@cropper/element-crosshair/dist/element-crosshair.esm.raw.js", "../../../../node_modules/@cropper/element-viewer/dist/element-viewer.esm.raw.js", "../../../../node_modules/cropperjs/dist/cropper.esm.raw.js"],
  "sourcesContent": ["const IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nconst WINDOW = IS_BROWSER ? window : {};\nconst IS_TOUCH_DEVICE = IS_BROWSER ? 'ontouchstart' in WINDOW.document.documentElement : false;\nconst HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\nconst NAMESPACE = 'cropper';\nconst CROPPER_CANVAS = `${NAMESPACE}-canvas`;\nconst CROPPER_CROSSHAIR = `${NAMESPACE}-crosshair`;\nconst CROPPER_GIRD = `${NAMESPACE}-grid`;\nconst CROPPER_HANDLE = `${NAMESPACE}-handle`;\nconst CROPPER_IMAGE = `${NAMESPACE}-image`;\nconst CROPPER_SELECTION = `${NAMESPACE}-selection`;\nconst CROPPER_SHADE = `${NAMESPACE}-shade`;\nconst CROPPER_VIEWER = `${NAMESPACE}-viewer`;\n// Actions\nconst ACTION_SELECT = 'select';\nconst ACTION_MOVE = 'move';\nconst ACTION_SCALE = 'scale';\nconst ACTION_ROTATE = 'rotate';\nconst ACTION_TRANSFORM = 'transform';\nconst ACTION_NONE = 'none';\nconst ACTION_RESIZE_NORTH = 'n-resize';\nconst ACTION_RESIZE_EAST = 'e-resize';\nconst ACTION_RESIZE_SOUTH = 's-resize';\nconst ACTION_RESIZE_WEST = 'w-resize';\nconst ACTION_RESIZE_NORTHEAST = 'ne-resize';\nconst ACTION_RESIZE_NORTHWEST = 'nw-resize';\nconst ACTION_RESIZE_SOUTHEAST = 'se-resize';\nconst ACTION_RESIZE_SOUTHWEST = 'sw-resize';\n// Attributes\nconst ATTRIBUTE_ACTION = 'action';\n// Native events\nconst EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\nconst EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\nconst EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\nconst EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\nconst EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\nconst EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\nconst EVENT_ERROR = 'error';\nconst EVENT_KEYDOWN = 'keydown';\nconst EVENT_LOAD = 'load';\nconst EVENT_RESIZE = 'resize';\nconst EVENT_WHEEL = 'wheel';\n// Custom events\nconst EVENT_ACTION = 'action';\nconst EVENT_ACTION_END = 'actionend';\nconst EVENT_ACTION_MOVE = 'actionmove';\nconst EVENT_ACTION_START = 'actionstart';\nconst EVENT_CHANGE = 'change';\nconst EVENT_TRANSFORM = 'transform';\n\n/**\n * Check if the given value is a string.\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if the given value is a string, else `false`.\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\n/**\n * Check if the given value is not a number.\n */\nconst isNaN = Number.isNaN || WINDOW.isNaN;\n/**\n * Check if the given value is a number.\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n */\nfunction isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n}\n/**\n * Check if the given value is a positive number.\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n */\nfunction isPositiveNumber(value) {\n    return isNumber(value) && value > 0 && value < Infinity;\n}\n/**\n * Check if the given value is undefined.\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n */\nfunction isUndefined(value) {\n    return typeof value === 'undefined';\n}\n/**\n * Check if the given value is an object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n */\nfunction isObject(value) {\n    return typeof value === 'object' && value !== null;\n}\nconst { hasOwnProperty } = Object.prototype;\n/**\n * Check if the given value is a plain object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n */\nfunction isPlainObject(value) {\n    if (!isObject(value)) {\n        return false;\n    }\n    try {\n        const { constructor } = value;\n        const { prototype } = constructor;\n        return constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Check if the given value is a function.\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * Check if the given node is an element.\n * @param {*} node The node to check.\n * @returns {boolean} Returns `true` if the given node is an element; otherwise, `false`.\n */\nfunction isElement(node) {\n    return typeof node === 'object' && node !== null && node.nodeType === 1;\n}\nconst REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n/**\n * Transform the given string from camelCase to kebab-case.\n * @param {string} value The value to transform.\n * @returns {string} Returns the transformed value.\n */\nfunction toKebabCase(value) {\n    return String(value).replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\n}\nconst REGEXP_KEBAB_CASE = /-[A-z\\d]/g;\n/**\n * Transform the given string from kebab-case to camelCase.\n * @param {string} value The value to transform.\n * @returns {string} Returns the transformed value.\n */\nfunction toCamelCase(value) {\n    return value.replace(REGEXP_KEBAB_CASE, (substring) => substring.slice(1).toUpperCase());\n}\nconst REGEXP_SPACES = /\\s\\s*/;\n/**\n * Remove event listener from the event target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener}\n * @param {EventTarget} target The target of the event.\n * @param {string} types The types of the event.\n * @param {EventListenerOrEventListenerObject} listener The listener of the event.\n * @param {EventListenerOptions} [options] The options specify characteristics about the event listener.\n */\nfunction off(target, types, listener, options) {\n    types.trim().split(REGEXP_SPACES).forEach((type) => {\n        target.removeEventListener(type, listener, options);\n    });\n}\n/**\n * Add event listener to the event target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener}\n * @param {EventTarget} target The target of the event.\n * @param {string} types The types of the event.\n * @param {EventListenerOrEventListenerObject} listener The listener of the event.\n * @param {AddEventListenerOptions} [options] The options specify characteristics about the event listener.\n */\nfunction on(target, types, listener, options) {\n    types.trim().split(REGEXP_SPACES).forEach((type) => {\n        target.addEventListener(type, listener, options);\n    });\n}\n/**\n * Add once event listener to the event target.\n * @param {EventTarget} target The target of the event.\n * @param {string} types The types of the event.\n * @param {EventListenerOrEventListenerObject} listener The listener of the event.\n * @param {AddEventListenerOptions} [options] The options specify characteristics about the event listener.\n */\nfunction once(target, types, listener, options) {\n    on(target, types, listener, Object.assign(Object.assign({}, options), { once: true }));\n}\nconst defaultEventOptions = {\n    bubbles: true,\n    cancelable: true,\n    composed: true,\n};\n/**\n * Dispatch event on the event target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent}\n * @param {EventTarget} target The target of the event.\n * @param {string} type The name of the event.\n * @param {*} [detail] The data passed when initializing the event.\n * @param {CustomEventInit} [options] The other event options.\n * @returns {boolean} Returns the result value.\n */\nfunction emit(target, type, detail, options) {\n    return target.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign(Object.assign({}, defaultEventOptions), { detail }), options)));\n}\nconst resolvedPromise = Promise.resolve();\n/**\n * Defers the callback to be executed after the next DOM update cycle.\n * @param {*} [context] The `this` context.\n * @param {Function} [callback] The callback to execute after the next DOM update cycle.\n * @returns {Promise} A promise that resolves to nothing.\n */\nfunction nextTick(context, callback) {\n    return callback\n        ? resolvedPromise.then(context ? callback.bind(context) : callback)\n        : resolvedPromise;\n}\n/**\n * Get the offset base on the document.\n * @param {Element} element The target element.\n * @returns {object} The offset data.\n */\nfunction getOffset(element) {\n    const { documentElement } = element.ownerDocument;\n    const box = element.getBoundingClientRect();\n    return {\n        left: box.left + (WINDOW.pageXOffset - documentElement.clientLeft),\n        top: box.top + (WINDOW.pageYOffset - documentElement.clientTop),\n    };\n}\nconst REGEXP_ANGLE_UNIT = /deg|g?rad|turn$/i;\n/**\n * Convert an angle to a radian number.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/angle}\n * @param {number|string} angle The angle to convert.\n * @returns {number} Returns the radian number.\n */\nfunction toAngleInRadian(angle) {\n    const value = parseFloat(angle) || 0;\n    if (value !== 0) {\n        const [unit = 'rad'] = String(angle).match(REGEXP_ANGLE_UNIT) || [];\n        switch (unit.toLowerCase()) {\n            case 'deg':\n                return (value / 360) * (Math.PI * 2);\n            case 'grad':\n                return (value / 400) * (Math.PI * 2);\n            case 'turn':\n                return value * (Math.PI * 2);\n        }\n    }\n    return value;\n}\nconst SIZE_ADJUSTMENT_TYPE_CONTAIN = 'contain';\nconst SIZE_ADJUSTMENT_TYPE_COVER = 'cover';\n/**\n * Get the max sizes in a rectangle under the given aspect ratio.\n * @param {object} data The original sizes.\n * @param {string} [type] The adjust type.\n * @returns {object} Returns the result sizes.\n */\nfunction getAdjustedSizes(data, type = SIZE_ADJUSTMENT_TYPE_CONTAIN) {\n    const { aspectRatio } = data;\n    let { width, height } = data;\n    const isValidWidth = isPositiveNumber(width);\n    const isValidHeight = isPositiveNumber(height);\n    if (isValidWidth && isValidHeight) {\n        const adjustedWidth = height * aspectRatio;\n        if ((type === SIZE_ADJUSTMENT_TYPE_CONTAIN && adjustedWidth > width)\n            || (type === SIZE_ADJUSTMENT_TYPE_COVER && adjustedWidth < width)) {\n            height = width / aspectRatio;\n        }\n        else {\n            width = height * aspectRatio;\n        }\n    }\n    else if (isValidWidth) {\n        height = width / aspectRatio;\n    }\n    else if (isValidHeight) {\n        width = height * aspectRatio;\n    }\n    return {\n        width,\n        height,\n    };\n}\n/**\n * Multiply multiple matrices.\n * @param {Array} matrix The first matrix.\n * @param {Array} args The rest matrices.\n * @returns {Array} Returns the result matrix.\n */\nfunction multiplyMatrices(matrix, ...args) {\n    if (args.length === 0) {\n        return matrix;\n    }\n    const [a1, b1, c1, d1, e1, f1] = matrix;\n    const [a2, b2, c2, d2, e2, f2] = args[0];\n    // ┌ a1 c1 e1 ┐   ┌ a2 c2 e2 ┐\n    // │ b1 d1 f1 │ × │ b2 d2 f2 │\n    // └ 0  0  1  ┘   └ 0  0  1  ┘\n    matrix = [\n        a1 * a2 + c1 * b2 /* + e1 * 0 */,\n        b1 * a2 + d1 * b2 /* + f1 * 0 */,\n        a1 * c2 + c1 * d2 /* + e1 * 0 */,\n        b1 * c2 + d1 * d2 /* + f1 * 0 */,\n        a1 * e2 + c1 * f2 + e1 /* * 1 */,\n        b1 * e2 + d1 * f2 + f1 /* * 1 */,\n    ];\n    return multiplyMatrices(matrix, ...args.slice(1));\n}\n\nexport { ACTION_MOVE, ACTION_NONE, ACTION_RESIZE_EAST, ACTION_RESIZE_NORTH, ACTION_RESIZE_NORTHEAST, ACTION_RESIZE_NORTHWEST, ACTION_RESIZE_SOUTH, ACTION_RESIZE_SOUTHEAST, ACTION_RESIZE_SOUTHWEST, ACTION_RESIZE_WEST, ACTION_ROTATE, ACTION_SCALE, ACTION_SELECT, ACTION_TRANSFORM, ATTRIBUTE_ACTION, CROPPER_CANVAS, CROPPER_CROSSHAIR, CROPPER_GIRD, CROPPER_HANDLE, CROPPER_IMAGE, CROPPER_SELECTION, CROPPER_SHADE, CROPPER_VIEWER, EVENT_ACTION, EVENT_ACTION_END, EVENT_ACTION_MOVE, EVENT_ACTION_START, EVENT_CHANGE, EVENT_ERROR, EVENT_KEYDOWN, EVENT_LOAD, EVENT_POINTER_DOWN, EVENT_POINTER_MOVE, EVENT_POINTER_UP, EVENT_RESIZE, EVENT_TOUCH_END, EVENT_TOUCH_MOVE, EVENT_TOUCH_START, EVENT_TRANSFORM, EVENT_WHEEL, HAS_POINTER_EVENT, IS_BROWSER, IS_TOUCH_DEVICE, NAMESPACE, WINDOW, emit, getAdjustedSizes, getOffset, isElement, isFunction, isNaN, isNumber, isObject, isPlainObject, isPositiveNumber, isString, isUndefined, multiplyMatrices, nextTick, off, on, once, toAngleInRadian, toCamelCase, toKebabCase };\n", "import { WINDOW, toCamelCase, toKebabCase, isNaN, isUndefined, isNumber, emit, nextTick, isObject, IS_BROWSER } from '@cropper/utils';\n\nvar style = `:host([hidden]){display:none!important}`;\n\nconst REGEXP_SUFFIX = /left|top|width|height/i;\nconst DEFAULT_SHADOW_ROOT_MODE = 'open';\nconst shadowRoots = new WeakMap();\nconst styleSheets = new WeakMap();\nconst tagNames = new Map();\nconst supportsAdoptedStyleSheets = WINDOW.document && Array.isArray(WINDOW.document.adoptedStyleSheets) && 'replaceSync' in WINDOW.CSSStyleSheet.prototype;\nclass CropperElement extends HTMLElement {\n    get $sharedStyle() {\n        return `${this.themeColor ? `:host{--theme-color: ${this.themeColor};}` : ''}${style}`;\n    }\n    constructor() {\n        var _a, _b;\n        super();\n        this.shadowRootMode = DEFAULT_SHADOW_ROOT_MODE;\n        this.slottable = true;\n        const name = (_b = (_a = Object.getPrototypeOf(this)) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.$name;\n        if (name) {\n            tagNames.set(name, this.tagName.toLowerCase());\n        }\n    }\n    static get observedAttributes() {\n        return [\n            'shadow-root-mode',\n            'slottable',\n            'theme-color',\n        ];\n    }\n    // Convert attribute to property\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (Object.is(newValue, oldValue)) {\n            return;\n        }\n        const propertyName = toCamelCase(name);\n        const oldPropertyValue = this[propertyName];\n        let newPropertyValue = newValue;\n        switch (typeof oldPropertyValue) {\n            case 'boolean':\n                newPropertyValue = newValue !== null && newValue !== 'false';\n                break;\n            case 'number':\n                newPropertyValue = Number(newValue);\n                break;\n        }\n        this[propertyName] = newPropertyValue;\n        switch (name) {\n            case 'theme-color': {\n                const styleSheet = styleSheets.get(this);\n                const styles = this.$sharedStyle;\n                if (styleSheet && styles) {\n                    if (supportsAdoptedStyleSheets) {\n                        styleSheet.replaceSync(styles);\n                    }\n                    else {\n                        styleSheet.textContent = styles;\n                    }\n                }\n                break;\n            }\n        }\n    }\n    // Convert property to attribute\n    $propertyChangedCallback(name, oldValue, newValue) {\n        if (Object.is(newValue, oldValue)) {\n            return;\n        }\n        name = toKebabCase(name);\n        switch (typeof newValue) {\n            case 'boolean':\n                if (newValue === true) {\n                    if (!this.hasAttribute(name)) {\n                        this.setAttribute(name, '');\n                    }\n                }\n                else {\n                    this.removeAttribute(name);\n                }\n                break;\n            case 'number':\n                if (isNaN(newValue)) {\n                    newValue = '';\n                }\n                else {\n                    newValue = String(newValue);\n                }\n            // Fall through\n            // case 'string':\n            // eslint-disable-next-line no-fallthrough\n            default:\n                if (newValue) {\n                    if (this.getAttribute(name) !== newValue) {\n                        this.setAttribute(name, newValue);\n                    }\n                }\n                else {\n                    this.removeAttribute(name);\n                }\n        }\n    }\n    connectedCallback() {\n        // Observe properties after observed attributes\n        Object.getPrototypeOf(this).constructor.observedAttributes.forEach((attribute) => {\n            const property = toCamelCase(attribute);\n            let value = this[property];\n            if (!isUndefined(value)) {\n                this.$propertyChangedCallback(property, undefined, value);\n            }\n            Object.defineProperty(this, property, {\n                enumerable: true,\n                configurable: true,\n                get() {\n                    return value;\n                },\n                set(newValue) {\n                    const oldValue = value;\n                    value = newValue;\n                    this.$propertyChangedCallback(property, oldValue, newValue);\n                },\n            });\n        });\n        const shadow = this.attachShadow({\n            mode: this.shadowRootMode || DEFAULT_SHADOW_ROOT_MODE,\n        });\n        if (!this.shadowRoot) {\n            shadowRoots.set(this, shadow);\n        }\n        styleSheets.set(this, this.$addStyles(this.$sharedStyle));\n        if (this.$style) {\n            this.$addStyles(this.$style);\n        }\n        if (this.$template) {\n            const template = document.createElement('template');\n            template.innerHTML = this.$template;\n            shadow.appendChild(template.content);\n        }\n        if (this.slottable) {\n            const slot = document.createElement('slot');\n            shadow.appendChild(slot);\n        }\n    }\n    disconnectedCallback() {\n        if (styleSheets.has(this)) {\n            styleSheets.delete(this);\n        }\n        if (shadowRoots.has(this)) {\n            shadowRoots.delete(this);\n        }\n    }\n    // eslint-disable-next-line class-methods-use-this\n    $getTagNameOf(name) {\n        var _a;\n        return (_a = tagNames.get(name)) !== null && _a !== void 0 ? _a : name;\n    }\n    $setStyles(properties) {\n        Object.keys(properties).forEach((property) => {\n            let value = properties[property];\n            if (isNumber(value)) {\n                if (value !== 0 && REGEXP_SUFFIX.test(property)) {\n                    value = `${value}px`;\n                }\n                else {\n                    value = String(value);\n                }\n            }\n            this.style[property] = value;\n        });\n        return this;\n    }\n    /**\n     * Outputs the shadow root of the element.\n     * @returns {ShadowRoot} Returns the shadow root.\n     */\n    $getShadowRoot() {\n        return this.shadowRoot || shadowRoots.get(this);\n    }\n    /**\n     * Adds styles to the shadow root.\n     * @param {string} styles The styles to add.\n     * @returns {CSSStyleSheet|HTMLStyleElement} Returns the generated style sheet.\n     */\n    $addStyles(styles) {\n        let styleSheet;\n        const shadow = this.$getShadowRoot();\n        if (supportsAdoptedStyleSheets) {\n            styleSheet = new CSSStyleSheet();\n            styleSheet.replaceSync(styles);\n            shadow.adoptedStyleSheets = shadow.adoptedStyleSheets.concat(styleSheet);\n        }\n        else {\n            styleSheet = document.createElement('style');\n            styleSheet.textContent = styles;\n            shadow.appendChild(styleSheet);\n        }\n        return styleSheet;\n    }\n    /**\n     * Dispatches an event at the element.\n     * @param {string} type The name of the event.\n     * @param {*} [detail] The data passed when initializing the event.\n     * @param {CustomEventInit} [options] The other event options.\n     * @returns {boolean} Returns the result value.\n     */\n    $emit(type, detail, options) {\n        return emit(this, type, detail, options);\n    }\n    /**\n     * Defers the callback to be executed after the next DOM update cycle.\n     * @param {Function} [callback] The callback to execute after the next DOM update cycle.\n     * @returns {Promise} A promise that resolves to nothing.\n     */\n    $nextTick(callback) {\n        return nextTick(this, callback);\n    }\n    /**\n     * Defines the constructor as a new custom element.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define}\n     * @param {string|object} [name] The element name.\n     * @param {object} [options] The element definition options.\n     */\n    static $define(name, options) {\n        if (isObject(name)) {\n            options = name;\n            name = '';\n        }\n        if (!name) {\n            name = this.$name || this.name;\n        }\n        name = toKebabCase(name);\n        if (IS_BROWSER && WINDOW.customElements && !WINDOW.customElements.get(name)) {\n            customElements.define(name, this, options);\n        }\n    }\n}\nCropperElement.$version = '2.0.0';\n\nexport { CropperElement as default };\n", "import CropperElement from '@cropper/element';\nimport { CROPPER_CANVAS, ACTION_NONE, on, EVENT_POINTER_DOWN, EVENT_POINTER_MOVE, EVENT_POINTER_UP, EVENT_WHEEL, off, isNumber, isElement, ATTRIBUTE_ACTION, EVENT_ACTION_START, EVENT_ACTION_MOVE, ACTION_TRANSFORM, EVENT_ACTION, EVENT_ACTION_END, ACTION_SCALE, isString, isPlainObject, isPositiveNumber, getAdjustedSizes, CROPPER_IMAGE, isFunction, ACTION_ROTATE } from '@cropper/utils';\n\nvar style = `:host{display:block;min-height:100px;min-width:200px;overflow:hidden;position:relative;touch-action:none;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}:host([background]){background-color:#fff;background-image:repeating-linear-gradient(45deg,#ccc 25%,transparent 0,transparent 75%,#ccc 0,#ccc),repeating-linear-gradient(45deg,#ccc 25%,transparent 0,transparent 75%,#ccc 0,#ccc);background-image:repeating-conic-gradient(#ccc 0 25%,#fff 0 50%);background-position:0 0,.5rem .5rem;background-size:1rem 1rem}:host([disabled]){pointer-events:none}:host([disabled]):after{bottom:0;content:\"\";cursor:not-allowed;display:block;left:0;pointer-events:none;position:absolute;right:0;top:0}`;\n\nclass CropperCanvas extends CropperElement {\n    constructor() {\n        super(...arguments);\n        this.$onPointerDown = null;\n        this.$onPointerMove = null;\n        this.$onPointerUp = null;\n        this.$onWheel = null;\n        this.$wheeling = false;\n        this.$pointers = new Map();\n        this.$style = style;\n        this.$action = ACTION_NONE;\n        this.background = false;\n        this.disabled = false;\n        this.scaleStep = 0.1;\n        this.themeColor = '#39f';\n    }\n    static get observedAttributes() {\n        return super.observedAttributes.concat([\n            'background',\n            'disabled',\n            'scale-step',\n        ]);\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (!this.disabled) {\n            this.$bind();\n        }\n    }\n    disconnectedCallback() {\n        if (!this.disabled) {\n            this.$unbind();\n        }\n        super.disconnectedCallback();\n    }\n    $propertyChangedCallback(name, oldValue, newValue) {\n        if (Object.is(newValue, oldValue)) {\n            return;\n        }\n        super.$propertyChangedCallback(name, oldValue, newValue);\n        switch (name) {\n            case 'disabled':\n                if (newValue) {\n                    this.$unbind();\n                }\n                else {\n                    this.$bind();\n                }\n                break;\n        }\n    }\n    $bind() {\n        if (!this.$onPointerDown) {\n            this.$onPointerDown = this.$handlePointerDown.bind(this);\n            on(this, EVENT_POINTER_DOWN, this.$onPointerDown);\n        }\n        if (!this.$onPointerMove) {\n            this.$onPointerMove = this.$handlePointerMove.bind(this);\n            on(this.ownerDocument, EVENT_POINTER_MOVE, this.$onPointerMove);\n        }\n        if (!this.$onPointerUp) {\n            this.$onPointerUp = this.$handlePointerUp.bind(this);\n            on(this.ownerDocument, EVENT_POINTER_UP, this.$onPointerUp);\n        }\n        if (!this.$onWheel) {\n            this.$onWheel = this.$handleWheel.bind(this);\n            on(this, EVENT_WHEEL, this.$onWheel, {\n                passive: false,\n                capture: true,\n            });\n        }\n    }\n    $unbind() {\n        if (this.$onPointerDown) {\n            off(this, EVENT_POINTER_DOWN, this.$onPointerDown);\n            this.$onPointerDown = null;\n        }\n        if (this.$onPointerMove) {\n            off(this.ownerDocument, EVENT_POINTER_MOVE, this.$onPointerMove);\n            this.$onPointerMove = null;\n        }\n        if (this.$onPointerUp) {\n            off(this.ownerDocument, EVENT_POINTER_UP, this.$onPointerUp);\n            this.$onPointerUp = null;\n        }\n        if (this.$onWheel) {\n            off(this, EVENT_WHEEL, this.$onWheel, {\n                capture: true,\n            });\n            this.$onWheel = null;\n        }\n    }\n    $handlePointerDown(event) {\n        const { buttons, button, type } = event;\n        if (this.disabled || (\n        // Handle pointer or mouse event, and ignore touch event\n        ((type === 'pointerdown' && event.pointerType === 'mouse') || type === 'mousedown') && (\n        // No primary button (Usually the left button)\n        (isNumber(buttons) && buttons !== 1) || (isNumber(button) && button !== 0)\n            // Open context menu\n            || event.ctrlKey))) {\n            return;\n        }\n        const { $pointers } = this;\n        let action = '';\n        if (event.changedTouches) {\n            Array.from(event.changedTouches).forEach(({ identifier, pageX, pageY, }) => {\n                $pointers.set(identifier, {\n                    startX: pageX,\n                    startY: pageY,\n                    endX: pageX,\n                    endY: pageY,\n                });\n            });\n        }\n        else {\n            const { pointerId = 0, pageX, pageY } = event;\n            $pointers.set(pointerId, {\n                startX: pageX,\n                startY: pageY,\n                endX: pageX,\n                endY: pageY,\n            });\n        }\n        if ($pointers.size > 1) {\n            action = ACTION_TRANSFORM;\n        }\n        else if (isElement(event.target)) {\n            action = event.target.action || event.target.getAttribute(ATTRIBUTE_ACTION) || '';\n        }\n        if (this.$emit(EVENT_ACTION_START, {\n            action,\n            relatedEvent: event,\n        }) === false) {\n            return;\n        }\n        // Prevent page zooming in the browsers for iOS.\n        event.preventDefault();\n        this.$action = action;\n        this.style.willChange = 'transform';\n    }\n    $handlePointerMove(event) {\n        const { $action, $pointers } = this;\n        if (this.disabled || $action === ACTION_NONE || $pointers.size === 0) {\n            return;\n        }\n        if (this.$emit(EVENT_ACTION_MOVE, {\n            action: $action,\n            relatedEvent: event,\n        }) === false) {\n            return;\n        }\n        // Prevent page scrolling.\n        event.preventDefault();\n        if (event.changedTouches) {\n            Array.from(event.changedTouches).forEach(({ identifier, pageX, pageY, }) => {\n                const pointer = $pointers.get(identifier);\n                if (pointer) {\n                    Object.assign(pointer, {\n                        endX: pageX,\n                        endY: pageY,\n                    });\n                }\n            });\n        }\n        else {\n            const { pointerId = 0, pageX, pageY } = event;\n            const pointer = $pointers.get(pointerId);\n            if (pointer) {\n                Object.assign(pointer, {\n                    endX: pageX,\n                    endY: pageY,\n                });\n            }\n        }\n        const detail = {\n            action: $action,\n            relatedEvent: event,\n        };\n        if ($action === ACTION_TRANSFORM) {\n            const pointers2 = new Map($pointers);\n            let maxRotateRate = 0;\n            let maxScaleRate = 0;\n            let rotate = 0;\n            let scale = 0;\n            let centerX = event.pageX;\n            let centerY = event.pageY;\n            $pointers.forEach((pointer, pointerId) => {\n                pointers2.delete(pointerId);\n                pointers2.forEach((pointer2) => {\n                    let x1 = pointer2.startX - pointer.startX;\n                    let y1 = pointer2.startY - pointer.startY;\n                    let x2 = pointer2.endX - pointer.endX;\n                    let y2 = pointer2.endY - pointer.endY;\n                    let z1 = 0;\n                    let z2 = 0;\n                    let a1 = 0;\n                    let a2 = 0;\n                    if (x1 === 0) {\n                        if (y1 < 0) {\n                            a1 = Math.PI * 2;\n                        }\n                        else if (y1 > 0) {\n                            a1 = Math.PI;\n                        }\n                    }\n                    else if (x1 > 0) {\n                        a1 = (Math.PI / 2) + Math.atan(y1 / x1);\n                    }\n                    else if (x1 < 0) {\n                        a1 = (Math.PI * 1.5) + Math.atan(y1 / x1);\n                    }\n                    if (x2 === 0) {\n                        if (y2 < 0) {\n                            a2 = Math.PI * 2;\n                        }\n                        else if (y2 > 0) {\n                            a2 = Math.PI;\n                        }\n                    }\n                    else if (x2 > 0) {\n                        a2 = (Math.PI / 2) + Math.atan(y2 / x2);\n                    }\n                    else if (x2 < 0) {\n                        a2 = (Math.PI * 1.5) + Math.atan(y2 / x2);\n                    }\n                    if (a2 > 0 || a1 > 0) {\n                        const rotateRate = a2 - a1;\n                        const absRotateRate = Math.abs(rotateRate);\n                        if (absRotateRate > maxRotateRate) {\n                            maxRotateRate = absRotateRate;\n                            rotate = rotateRate;\n                            centerX = (pointer.startX + pointer2.startX) / 2;\n                            centerY = (pointer.startY + pointer2.startY) / 2;\n                        }\n                    }\n                    x1 = Math.abs(x1);\n                    y1 = Math.abs(y1);\n                    x2 = Math.abs(x2);\n                    y2 = Math.abs(y2);\n                    if (x1 > 0 && y1 > 0) {\n                        z1 = Math.sqrt((x1 * x1) + (y1 * y1));\n                    }\n                    else if (x1 > 0) {\n                        z1 = x1;\n                    }\n                    else if (y1 > 0) {\n                        z1 = y1;\n                    }\n                    if (x2 > 0 && y2 > 0) {\n                        z2 = Math.sqrt((x2 * x2) + (y2 * y2));\n                    }\n                    else if (x2 > 0) {\n                        z2 = x2;\n                    }\n                    else if (y2 > 0) {\n                        z2 = y2;\n                    }\n                    if (z1 > 0 && z2 > 0) {\n                        const scaleRate = (z2 - z1) / z1;\n                        const absScaleRate = Math.abs(scaleRate);\n                        if (absScaleRate > maxScaleRate) {\n                            maxScaleRate = absScaleRate;\n                            scale = scaleRate;\n                            centerX = (pointer.startX + pointer2.startX) / 2;\n                            centerY = (pointer.startY + pointer2.startY) / 2;\n                        }\n                    }\n                });\n            });\n            const rotatable = maxRotateRate > 0;\n            const scalable = maxScaleRate > 0;\n            if (rotatable && scalable) {\n                detail.rotate = rotate;\n                detail.scale = scale;\n                detail.centerX = centerX;\n                detail.centerY = centerY;\n            }\n            else if (rotatable) {\n                detail.action = ACTION_ROTATE;\n                detail.rotate = rotate;\n                detail.centerX = centerX;\n                detail.centerY = centerY;\n            }\n            else if (scalable) {\n                detail.action = ACTION_SCALE;\n                detail.scale = scale;\n                detail.centerX = centerX;\n                detail.centerY = centerY;\n            }\n            else {\n                detail.action = ACTION_NONE;\n            }\n        }\n        else {\n            const [pointer] = Array.from($pointers.values());\n            Object.assign(detail, pointer);\n        }\n        // Override the starting coordinate\n        $pointers.forEach((pointer) => {\n            pointer.startX = pointer.endX;\n            pointer.startY = pointer.endY;\n        });\n        if (detail.action !== ACTION_NONE) {\n            this.$emit(EVENT_ACTION, detail, {\n                cancelable: false,\n            });\n        }\n    }\n    $handlePointerUp(event) {\n        const { $action, $pointers } = this;\n        if (this.disabled || $action === ACTION_NONE) {\n            return;\n        }\n        if (this.$emit(EVENT_ACTION_END, {\n            action: $action,\n            relatedEvent: event,\n        }) === false) {\n            return;\n        }\n        event.preventDefault();\n        if (event.changedTouches) {\n            Array.from(event.changedTouches).forEach(({ identifier, }) => {\n                $pointers.delete(identifier);\n            });\n        }\n        else {\n            const { pointerId = 0 } = event;\n            $pointers.delete(pointerId);\n        }\n        if ($pointers.size === 0) {\n            this.style.willChange = '';\n            this.$action = ACTION_NONE;\n        }\n    }\n    $handleWheel(event) {\n        if (this.disabled) {\n            return;\n        }\n        event.preventDefault();\n        // Limit wheel speed to prevent zoom too fast (#21)\n        if (this.$wheeling) {\n            return;\n        }\n        this.$wheeling = true;\n        // Debounce by 50ms\n        setTimeout(() => {\n            this.$wheeling = false;\n        }, 50);\n        const delta = event.deltaY > 0 ? -1 : 1;\n        const scale = delta * this.scaleStep;\n        this.$emit(EVENT_ACTION, {\n            action: ACTION_SCALE,\n            scale,\n            relatedEvent: event,\n        }, {\n            cancelable: false,\n        });\n    }\n    /**\n     * Changes the current action to a new one.\n     * @param {string} action The new action.\n     * @returns {CropperCanvas} Returns `this` for chaining.\n     */\n    $setAction(action) {\n        if (isString(action)) {\n            this.$action = action;\n        }\n        return this;\n    }\n    /**\n     * Generates a real canvas element, with the image draw into if there is one.\n     * @param {object} [options] The available options.\n     * @param {number} [options.width] The width of the canvas.\n     * @param {number} [options.height] The height of the canvas.\n     * @param {Function} [options.beforeDraw] The function called before drawing the image onto the canvas.\n     * @returns {Promise} Returns a promise that resolves to the generated canvas element.\n     */\n    $toCanvas(options) {\n        return new Promise((resolve, reject) => {\n            if (!this.isConnected) {\n                reject(new Error('The current element is not connected to the DOM.'));\n                return;\n            }\n            const canvas = document.createElement('canvas');\n            let width = this.offsetWidth;\n            let height = this.offsetHeight;\n            let scale = 1;\n            if (isPlainObject(options)\n                && (isPositiveNumber(options.width) || isPositiveNumber(options.height))) {\n                ({ width, height } = getAdjustedSizes({\n                    aspectRatio: width / height,\n                    width: options.width,\n                    height: options.height,\n                }));\n                scale = width / this.offsetWidth;\n            }\n            canvas.width = width;\n            canvas.height = height;\n            const cropperImage = this.querySelector(this.$getTagNameOf(CROPPER_IMAGE));\n            if (!cropperImage) {\n                resolve(canvas);\n                return;\n            }\n            cropperImage.$ready().then((image) => {\n                const context = canvas.getContext('2d');\n                if (context) {\n                    const [a, b, c, d, e, f] = cropperImage.$getTransform();\n                    let newE = e;\n                    let newF = f;\n                    let destWidth = image.naturalWidth;\n                    let destHeight = image.naturalHeight;\n                    if (scale !== 1) {\n                        newE *= scale;\n                        newF *= scale;\n                        destWidth *= scale;\n                        destHeight *= scale;\n                    }\n                    const centerX = destWidth / 2;\n                    const centerY = destHeight / 2;\n                    context.fillStyle = 'transparent';\n                    context.fillRect(0, 0, width, height);\n                    if (isPlainObject(options) && isFunction(options.beforeDraw)) {\n                        options.beforeDraw.call(this, context, canvas);\n                    }\n                    context.save();\n                    // Move the transform origin to the center of the image.\n                    // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\n                    context.translate(centerX, centerY);\n                    context.transform(a, b, c, d, newE, newF);\n                    // Reset the transform origin to the top-left of the image.\n                    context.translate(-centerX, -centerY);\n                    context.drawImage(image, 0, 0, destWidth, destHeight);\n                    context.restore();\n                }\n                resolve(canvas);\n            }).catch(reject);\n        });\n    }\n}\nCropperCanvas.$name = CROPPER_CANVAS;\nCropperCanvas.$version = '2.0.0';\n\nexport { CropperCanvas as default };\n", "import CropperElement from '@cropper/element';\nimport { CROPPER_IMAGE, CROPPER_CANVAS, on, EVENT_ACTION_START, EVENT_ACTION_END, EVENT_ACTION, EVENT_LOAD, off, ACTION_TRANSFORM, ACTION_ROTATE, ACTION_SCALE, ACTION_NONE, CROPPER_SELECTION, ACTION_MOVE, once, EVENT_ERROR, isFunction, isNumber, toAngleInRadian, multiplyMatrices, EVENT_TRANSFORM } from '@cropper/utils';\n\nvar style = `:host{display:inline-block}img{display:block;height:100%;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;width:100%}`;\n\nconst canvasCache = new WeakMap();\nconst NATIVE_ATTRIBUTES = [\n    'alt',\n    'crossorigin',\n    'decoding',\n    'importance',\n    'loading',\n    'referrerpolicy',\n    'sizes',\n    'src',\n    'srcset',\n];\nclass CropperImage extends CropperElement {\n    constructor() {\n        super(...arguments);\n        this.$matrix = [1, 0, 0, 1, 0, 0];\n        this.$onLoad = null;\n        this.$onCanvasAction = null;\n        this.$onCanvasActionEnd = null;\n        this.$onCanvasActionStart = null;\n        this.$actionStartTarget = null;\n        this.$style = style;\n        this.$image = new Image();\n        this.initialCenterSize = 'contain';\n        this.rotatable = false;\n        this.scalable = false;\n        this.skewable = false;\n        this.slottable = false;\n        this.translatable = false;\n    }\n    set $canvas(element) {\n        canvasCache.set(this, element);\n    }\n    get $canvas() {\n        return canvasCache.get(this);\n    }\n    static get observedAttributes() {\n        return super.observedAttributes.concat(NATIVE_ATTRIBUTES, [\n            'initial-center-size',\n            'rotatable',\n            'scalable',\n            'skewable',\n            'translatable',\n        ]);\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (Object.is(newValue, oldValue)) {\n            return;\n        }\n        super.attributeChangedCallback(name, oldValue, newValue);\n        // Inherits the native attributes\n        if (NATIVE_ATTRIBUTES.includes(name)) {\n            this.$image.setAttribute(name, newValue);\n        }\n    }\n    $propertyChangedCallback(name, oldValue, newValue) {\n        if (Object.is(newValue, oldValue)) {\n            return;\n        }\n        super.$propertyChangedCallback(name, oldValue, newValue);\n        switch (name) {\n            case 'initialCenterSize':\n                this.$nextTick(() => {\n                    this.$center(newValue);\n                });\n                break;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        const { $image } = this;\n        const $canvas = this.closest(this.$getTagNameOf(CROPPER_CANVAS));\n        if ($canvas) {\n            this.$canvas = $canvas;\n            this.$setStyles({\n                // Make it a block element to avoid side effects (#1074).\n                display: 'block',\n                position: 'absolute',\n            });\n            this.$onCanvasActionStart = (event) => {\n                var _a, _b;\n                this.$actionStartTarget = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.relatedEvent) === null || _b === void 0 ? void 0 : _b.target;\n            };\n            this.$onCanvasActionEnd = () => {\n                this.$actionStartTarget = null;\n            };\n            this.$onCanvasAction = this.$handleAction.bind(this);\n            on($canvas, EVENT_ACTION_START, this.$onCanvasActionStart);\n            on($canvas, EVENT_ACTION_END, this.$onCanvasActionEnd);\n            on($canvas, EVENT_ACTION, this.$onCanvasAction);\n        }\n        this.$onLoad = this.$handleLoad.bind(this);\n        on($image, EVENT_LOAD, this.$onLoad);\n        this.$getShadowRoot().appendChild($image);\n    }\n    disconnectedCallback() {\n        const { $image, $canvas } = this;\n        if ($canvas) {\n            if (this.$onCanvasActionStart) {\n                off($canvas, EVENT_ACTION_START, this.$onCanvasActionStart);\n                this.$onCanvasActionStart = null;\n            }\n            if (this.$onCanvasActionEnd) {\n                off($canvas, EVENT_ACTION_END, this.$onCanvasActionEnd);\n                this.$onCanvasActionEnd = null;\n            }\n            if (this.$onCanvasAction) {\n                off($canvas, EVENT_ACTION, this.$onCanvasAction);\n                this.$onCanvasAction = null;\n            }\n        }\n        if ($image && this.$onLoad) {\n            off($image, EVENT_LOAD, this.$onLoad);\n            this.$onLoad = null;\n        }\n        this.$getShadowRoot().removeChild($image);\n        super.disconnectedCallback();\n    }\n    $handleLoad() {\n        const { $image } = this;\n        this.$setStyles({\n            width: $image.naturalWidth,\n            height: $image.naturalHeight,\n        });\n        if (this.$canvas) {\n            this.$center(this.initialCenterSize);\n        }\n    }\n    $handleAction(event) {\n        if (this.hidden || !(this.rotatable || this.scalable || this.translatable)) {\n            return;\n        }\n        const { $canvas } = this;\n        const { detail } = event;\n        if (detail) {\n            const { relatedEvent } = detail;\n            let { action } = detail;\n            if (action === ACTION_TRANSFORM && (!this.rotatable || !this.scalable)) {\n                if (this.rotatable) {\n                    action = ACTION_ROTATE;\n                }\n                else if (this.scalable) {\n                    action = ACTION_SCALE;\n                }\n                else {\n                    action = ACTION_NONE;\n                }\n            }\n            switch (action) {\n                case ACTION_MOVE:\n                    if (this.translatable) {\n                        let $selection = null;\n                        if (relatedEvent) {\n                            $selection = relatedEvent.target.closest(this.$getTagNameOf(CROPPER_SELECTION));\n                        }\n                        if (!$selection) {\n                            $selection = $canvas.querySelector(this.$getTagNameOf(CROPPER_SELECTION));\n                        }\n                        if ($selection && $selection.multiple && !$selection.active) {\n                            $selection = $canvas.querySelector(`${this.$getTagNameOf(CROPPER_SELECTION)}[active]`);\n                        }\n                        if (!$selection || $selection.hidden || !$selection.movable || $selection.dynamic\n                            || !(this.$actionStartTarget && $selection.contains(this.$actionStartTarget))) {\n                            this.$move(detail.endX - detail.startX, detail.endY - detail.startY);\n                        }\n                    }\n                    break;\n                case ACTION_ROTATE:\n                    if (this.rotatable) {\n                        if (relatedEvent) {\n                            const { x, y } = this.getBoundingClientRect();\n                            this.$rotate(detail.rotate, relatedEvent.clientX - x, relatedEvent.clientY - y);\n                        }\n                        else {\n                            this.$rotate(detail.rotate);\n                        }\n                    }\n                    break;\n                case ACTION_SCALE:\n                    if (this.scalable) {\n                        if (relatedEvent) {\n                            const $selection = relatedEvent.target.closest(this.$getTagNameOf(CROPPER_SELECTION));\n                            if (!$selection\n                                || !$selection.zoomable\n                                || ($selection.zoomable && $selection.dynamic)) {\n                                const { x, y } = this.getBoundingClientRect();\n                                this.$zoom(detail.scale, relatedEvent.clientX - x, relatedEvent.clientY - y);\n                            }\n                        }\n                        else {\n                            this.$zoom(detail.scale);\n                        }\n                    }\n                    break;\n                case ACTION_TRANSFORM:\n                    if (this.rotatable && this.scalable) {\n                        const { rotate } = detail;\n                        let { scale } = detail;\n                        if (scale < 0) {\n                            scale = 1 / (1 - scale);\n                        }\n                        else {\n                            scale += 1;\n                        }\n                        const cos = Math.cos(rotate);\n                        const sin = Math.sin(rotate);\n                        const [scaleX, skewY, skewX, scaleY] = [\n                            cos * scale,\n                            sin * scale,\n                            -sin * scale,\n                            cos * scale,\n                        ];\n                        if (relatedEvent) {\n                            const clientRect = this.getBoundingClientRect();\n                            const x = relatedEvent.clientX - clientRect.x;\n                            const y = relatedEvent.clientY - clientRect.y;\n                            const [a, b, c, d] = this.$matrix;\n                            const originX = clientRect.width / 2;\n                            const originY = clientRect.height / 2;\n                            const moveX = x - originX;\n                            const moveY = y - originY;\n                            const translateX = ((moveX * d) - (c * moveY)) / ((a * d) - (c * b));\n                            const translateY = ((moveY * a) - (b * moveX)) / ((a * d) - (c * b));\n                            /**\n                             * Equals to\n                             * this.$rotate(rotate, x, y);\n                             * this.$scale(scale, x, y);\n                             */\n                            this.$transform(scaleX, skewY, skewX, scaleY, translateX * (1 - scaleX) + translateY * skewX, translateY * (1 - scaleY) + translateX * skewY);\n                        }\n                        else {\n                            /**\n                             * Equals to\n                             * this.$rotate(rotate);\n                             * this.$scale(scale);\n                             */\n                            this.$transform(scaleX, skewY, skewX, scaleY, 0, 0);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Defers the callback to execute after successfully loading the image.\n     * @param {Function} [callback] The callback to execute after successfully loading the image.\n     * @returns {Promise} Returns a promise that resolves to the image element.\n     */\n    $ready(callback) {\n        const { $image } = this;\n        const promise = new Promise((resolve, reject) => {\n            const error = new Error('Failed to load the image source');\n            if ($image.complete) {\n                if ($image.naturalWidth > 0 && $image.naturalHeight > 0) {\n                    resolve($image);\n                }\n                else {\n                    reject(error);\n                }\n            }\n            else {\n                const onLoad = () => {\n                    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                    off($image, EVENT_ERROR, onError);\n                    resolve($image);\n                };\n                const onError = () => {\n                    off($image, EVENT_LOAD, onLoad);\n                    reject(error);\n                };\n                once($image, EVENT_LOAD, onLoad);\n                once($image, EVENT_ERROR, onError);\n            }\n        });\n        if (isFunction(callback)) {\n            promise.then((image) => {\n                callback(image);\n                return image;\n            });\n        }\n        return promise;\n    }\n    /**\n     * Aligns the image to the center of its parent element.\n     * @param {string} [size] The size of the image.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $center(size) {\n        const { parentElement } = this;\n        if (!parentElement) {\n            return this;\n        }\n        const container = parentElement.getBoundingClientRect();\n        const containerWidth = container.width;\n        const containerHeight = container.height;\n        const { x, y, width, height, } = this.getBoundingClientRect();\n        const startX = x + (width / 2);\n        const startY = y + (height / 2);\n        const endX = container.x + (containerWidth / 2);\n        const endY = container.y + (containerHeight / 2);\n        this.$move(endX - startX, endY - startY);\n        if (size && (width !== containerWidth || height !== containerHeight)) {\n            const scaleX = containerWidth / width;\n            const scaleY = containerHeight / height;\n            switch (size) {\n                case 'cover':\n                    this.$scale(Math.max(scaleX, scaleY));\n                    break;\n                case 'contain':\n                    this.$scale(Math.min(scaleX, scaleY));\n                    break;\n            }\n        }\n        return this;\n    }\n    /**\n     * Moves the image.\n     * @param {number} x The moving distance in the horizontal direction.\n     * @param {number} [y] The moving distance in the vertical direction.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $move(x, y = x) {\n        if (this.translatable && isNumber(x) && isNumber(y)) {\n            const [a, b, c, d] = this.$matrix;\n            const e = ((x * d) - (c * y)) / ((a * d) - (c * b));\n            const f = ((y * a) - (b * x)) / ((a * d) - (c * b));\n            this.$translate(e, f);\n        }\n        return this;\n    }\n    /**\n     * Moves the image to a specific position.\n     * @param {number} x The new position in the horizontal direction.\n     * @param {number} [y] The new position in the vertical direction.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $moveTo(x, y = x) {\n        if (this.translatable && isNumber(x) && isNumber(y)) {\n            const [a, b, c, d] = this.$matrix;\n            const e = ((x * d) - (c * y)) / ((a * d) - (c * b));\n            const f = ((y * a) - (b * x)) / ((a * d) - (c * b));\n            this.$setTransform(a, b, c, d, e, f);\n        }\n        return this;\n    }\n    /**\n     * Rotates the image.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate}\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate}\n     * @param {number|string} angle The rotation angle (in radians).\n     * @param {number} [x] The rotation origin in the horizontal, defaults to the center of the image.\n     * @param {number} [y] The rotation origin in the vertical, defaults to the center of the image.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $rotate(angle, x, y) {\n        if (this.rotatable) {\n            const radian = toAngleInRadian(angle);\n            const cos = Math.cos(radian);\n            const sin = Math.sin(radian);\n            const [scaleX, skewY, skewX, scaleY] = [cos, sin, -sin, cos];\n            if (isNumber(x) && isNumber(y)) {\n                const [a, b, c, d] = this.$matrix;\n                const { width, height } = this.getBoundingClientRect();\n                const originX = width / 2;\n                const originY = height / 2;\n                const moveX = x - originX;\n                const moveY = y - originY;\n                const translateX = ((moveX * d) - (c * moveY)) / ((a * d) - (c * b));\n                const translateY = ((moveY * a) - (b * moveX)) / ((a * d) - (c * b));\n                /**\n                 * Equals to\n                 * this.$translate(translateX, translateX);\n                 * this.$rotate(angle);\n                 * this.$translate(-translateX, -translateX);\n                 */\n                this.$transform(scaleX, skewY, skewX, scaleY, translateX * (1 - scaleX) - translateY * skewX, translateY * (1 - scaleY) - translateX * skewY);\n            }\n            else {\n                this.$transform(scaleX, skewY, skewX, scaleY, 0, 0);\n            }\n        }\n        return this;\n    }\n    /**\n     * Zooms the image.\n     * @param {number} scale The zoom factor. Positive numbers for zooming in, and negative numbers for zooming out.\n     * @param {number} [x] The zoom origin in the horizontal, defaults to the center of the image.\n     * @param {number} [y] The zoom origin in the vertical, defaults to the center of the image.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $zoom(scale, x, y) {\n        if (!this.scalable || scale === 0) {\n            return this;\n        }\n        if (scale < 0) {\n            scale = 1 / (1 - scale);\n        }\n        else {\n            scale += 1;\n        }\n        if (isNumber(x) && isNumber(y)) {\n            const [a, b, c, d] = this.$matrix;\n            const { width, height } = this.getBoundingClientRect();\n            const originX = width / 2;\n            const originY = height / 2;\n            const moveX = x - originX;\n            const moveY = y - originY;\n            const translateX = ((moveX * d) - (c * moveY)) / ((a * d) - (c * b));\n            const translateY = ((moveY * a) - (b * moveX)) / ((a * d) - (c * b));\n            /**\n             * Equals to\n             * this.$translate(translateX, translateX);\n             * this.$scale(scale);\n             * this.$translate(-translateX, -translateX);\n             */\n            this.$transform(scale, 0, 0, scale, translateX * (1 - scale), translateY * (1 - scale));\n        }\n        else {\n            this.$scale(scale);\n        }\n        return this;\n    }\n    /**\n     * Scales the image.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale}\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale}\n     * @param {number} x The scaling factor in the horizontal direction.\n     * @param {number} [y] The scaling factor in the vertical direction.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $scale(x, y = x) {\n        if (this.scalable) {\n            this.$transform(x, 0, 0, y, 0, 0);\n        }\n        return this;\n    }\n    /**\n     * Skews the image.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew}\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform}\n     * @param {number|string} x The skewing angle in the horizontal direction.\n     * @param {number|string} [y] The skewing angle in the vertical direction.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $skew(x, y = 0) {\n        if (this.skewable) {\n            const radianX = toAngleInRadian(x);\n            const radianY = toAngleInRadian(y);\n            this.$transform(1, Math.tan(radianY), Math.tan(radianX), 1, 0, 0);\n        }\n        return this;\n    }\n    /**\n     * Translates the image.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate}\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate}\n     * @param {number} x The translating distance in the horizontal direction.\n     * @param {number} [y] The translating distance in the vertical direction.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $translate(x, y = x) {\n        if (this.translatable && isNumber(x) && isNumber(y)) {\n            this.$transform(1, 0, 0, 1, x, y);\n        }\n        return this;\n    }\n    /**\n     * Transforms the image.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix}\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform}\n     * @param {number} a The scaling factor in the horizontal direction.\n     * @param {number} b The skewing angle in the vertical direction.\n     * @param {number} c The skewing angle in the horizontal direction.\n     * @param {number} d The scaling factor in the vertical direction.\n     * @param {number} e The translating distance in the horizontal direction.\n     * @param {number} f The translating distance in the vertical direction.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $transform(a, b, c, d, e, f) {\n        if (isNumber(a)\n            && isNumber(b)\n            && isNumber(c)\n            && isNumber(d)\n            && isNumber(e)\n            && isNumber(f)) {\n            return this.$setTransform(multiplyMatrices(this.$matrix, [a, b, c, d, e, f]));\n        }\n        return this;\n    }\n    /**\n     * Resets (overrides) the current transform to the specific identity matrix.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform}\n     * @param {number|Array} a The scaling factor in the horizontal direction.\n     * @param {number} b The skewing angle in the vertical direction.\n     * @param {number} c The skewing angle in the horizontal direction.\n     * @param {number} d The scaling factor in the vertical direction.\n     * @param {number} e The translating distance in the horizontal direction.\n     * @param {number} f The translating distance in the vertical direction.\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $setTransform(a, b, c, d, e, f) {\n        if (this.rotatable || this.scalable || this.skewable || this.translatable) {\n            if (Array.isArray(a)) {\n                [a, b, c, d, e, f] = a;\n            }\n            if (isNumber(a)\n                && isNumber(b)\n                && isNumber(c)\n                && isNumber(d)\n                && isNumber(e)\n                && isNumber(f)) {\n                const oldMatrix = [...this.$matrix];\n                const newMatrix = [a, b, c, d, e, f];\n                if (this.$emit(EVENT_TRANSFORM, {\n                    matrix: newMatrix,\n                    oldMatrix,\n                }) === false) {\n                    return this;\n                }\n                this.$matrix = newMatrix;\n                this.style.transform = `matrix(${newMatrix.join(', ')})`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Retrieves the current transformation matrix being applied to the element.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getTransform}\n     * @returns {Array} Returns the readonly transformation matrix.\n     */\n    $getTransform() {\n        return this.$matrix.slice();\n    }\n    /**\n     * Resets the current transform to the initial identity matrix.\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform}\n     * @returns {CropperImage} Returns `this` for chaining.\n     */\n    $resetTransform() {\n        return this.$setTransform([1, 0, 0, 1, 0, 0]);\n    }\n}\nCropperImage.$name = CROPPER_IMAGE;\nCropperImage.$version = '2.0.0';\n\nexport { CropperImage as default };\n", "import CropperElement from '@cropper/element';\nimport { CROPPER_SHADE, CROPPER_CANVAS, CROPPER_SELECTION, ACTION_SELECT, on, EVENT_ACTION_START, EVENT_ACTION_END, EVENT_CHANGE, off, isNumber, WINDOW } from '@cropper/utils';\n\nvar style = `:host{display:block;height:0;left:0;outline:var(--theme-color) solid 1px;position:relative;top:0;width:0}:host([transparent]){outline-color:transparent}`;\n\nconst canvasCache = new WeakMap();\nclass CropperShade extends CropperElement {\n    constructor() {\n        super(...arguments);\n        this.$onCanvasChange = null;\n        this.$onCanvasActionEnd = null;\n        this.$onCanvasActionStart = null;\n        this.$style = style;\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.slottable = false;\n        this.themeColor = 'rgba(0, 0, 0, 0.65)';\n    }\n    set $canvas(element) {\n        canvasCache.set(this, element);\n    }\n    get $canvas() {\n        return canvasCache.get(this);\n    }\n    static get observedAttributes() {\n        return super.observedAttributes.concat([\n            'height',\n            'width',\n            'x',\n            'y',\n        ]);\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        const $canvas = this.closest(this.$getTagNameOf(CROPPER_CANVAS));\n        if ($canvas) {\n            this.$canvas = $canvas;\n            this.style.position = 'absolute';\n            const $selection = $canvas.querySelector(this.$getTagNameOf(CROPPER_SELECTION));\n            if ($selection) {\n                this.$onCanvasActionStart = (event) => {\n                    if ($selection.hidden && event.detail.action === ACTION_SELECT) {\n                        this.hidden = false;\n                    }\n                };\n                this.$onCanvasActionEnd = (event) => {\n                    if ($selection.hidden && event.detail.action === ACTION_SELECT) {\n                        this.hidden = true;\n                    }\n                };\n                this.$onCanvasChange = (event) => {\n                    const { x, y, width, height, } = event.detail;\n                    this.$change(x, y, width, height);\n                    if ($selection.hidden || (x === 0 && y === 0 && width === 0 && height === 0)) {\n                        this.hidden = true;\n                    }\n                };\n                on($canvas, EVENT_ACTION_START, this.$onCanvasActionStart);\n                on($canvas, EVENT_ACTION_END, this.$onCanvasActionEnd);\n                on($canvas, EVENT_CHANGE, this.$onCanvasChange);\n            }\n        }\n        this.$render();\n    }\n    disconnectedCallback() {\n        const { $canvas } = this;\n        if ($canvas) {\n            if (this.$onCanvasActionStart) {\n                off($canvas, EVENT_ACTION_START, this.$onCanvasActionStart);\n                this.$onCanvasActionStart = null;\n            }\n            if (this.$onCanvasActionEnd) {\n                off($canvas, EVENT_ACTION_END, this.$onCanvasActionEnd);\n                this.$onCanvasActionEnd = null;\n            }\n            if (this.$onCanvasChange) {\n                off($canvas, EVENT_CHANGE, this.$onCanvasChange);\n                this.$onCanvasChange = null;\n            }\n        }\n        super.disconnectedCallback();\n    }\n    /**\n     * Changes the position and/or size of the shade.\n     * @param {number} x The new position in the horizontal direction.\n     * @param {number} y The new position in the vertical direction.\n     * @param {number} [width] The new width.\n     * @param {number} [height] The new height.\n     * @returns {CropperShade} Returns `this` for chaining.\n     */\n    $change(x, y, width = this.width, height = this.height) {\n        if (!isNumber(x)\n            || !isNumber(y)\n            || !isNumber(width)\n            || !isNumber(height)\n            || (x === this.x && y === this.y && width === this.width && height === this.height)) {\n            return this;\n        }\n        if (this.hidden) {\n            this.hidden = false;\n        }\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        return this.$render();\n    }\n    /**\n     * Resets the shade to its initial position and size.\n     * @returns {CropperShade} Returns `this` for chaining.\n     */\n    $reset() {\n        return this.$change(0, 0, 0, 0);\n    }\n    /**\n     * Refreshes the position or size of the shade.\n     * @returns {CropperShade} Returns `this` for chaining.\n     */\n    $render() {\n        return this.$setStyles({\n            transform: `translate(${this.x}px, ${this.y}px)`,\n            width: this.width,\n            height: this.height,\n            outlineWidth: WINDOW.innerWidth,\n        });\n    }\n}\nCropperShade.$name = CROPPER_SHADE;\nCropperShade.$version = '2.0.0';\n\nexport { CropperShade as default };\n", "import CropperElement from '@cropper/element';\nimport { CROPPER_HANDLE, ACTION_NONE } from '@cropper/utils';\n\nvar style = `:host{background-color:var(--theme-color);display:block}:host([action=move]),:host([action=select]){height:100%;left:0;position:absolute;top:0;width:100%}:host([action=move]){cursor:move}:host([action=select]){cursor:crosshair}:host([action$=-resize]){background-color:transparent;height:15px;position:absolute;width:15px}:host([action$=-resize]):after{background-color:var(--theme-color);content:\"\";display:block;height:5px;left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);width:5px}:host([action=n-resize]),:host([action=s-resize]){cursor:ns-resize;left:50%;transform:translateX(-50%);width:100%}:host([action=n-resize]){top:-8px}:host([action=s-resize]){bottom:-8px}:host([action=e-resize]),:host([action=w-resize]){cursor:ew-resize;height:100%;top:50%;transform:translateY(-50%)}:host([action=e-resize]){right:-8px}:host([action=w-resize]){left:-8px}:host([action=ne-resize]){cursor:nesw-resize;right:-8px;top:-8px}:host([action=nw-resize]){cursor:nwse-resize;left:-8px;top:-8px}:host([action=se-resize]){bottom:-8px;cursor:nwse-resize;right:-8px}:host([action=se-resize]):after{height:15px;width:15px}@media (pointer:coarse){:host([action=se-resize]):after{height:10px;width:10px}}@media (pointer:fine){:host([action=se-resize]):after{height:5px;width:5px}}:host([action=sw-resize]){bottom:-8px;cursor:nesw-resize;left:-8px}:host([plain]){background-color:transparent}`;\n\nclass CropperHandle extends CropperElement {\n    constructor() {\n        super(...arguments);\n        this.$onCanvasCropEnd = null;\n        this.$onCanvasCropStart = null;\n        this.$style = style;\n        this.action = ACTION_NONE;\n        this.plain = false;\n        this.slottable = false;\n        this.themeColor = 'rgba(51, 153, 255, 0.5)';\n    }\n    static get observedAttributes() {\n        return super.observedAttributes.concat([\n            'action',\n            'plain',\n        ]);\n    }\n}\nCropperHandle.$name = CROPPER_HANDLE;\nCropperHandle.$version = '2.0.0';\n\nexport { CropperHandle as default };\n", "import CropperElement from '@cropper/element';\nimport { CROPPER_SELECTION, EVENT_CHANGE, on, EVENT_KEYDOWN, off, isPositiveNumber, CROPPER_CANVAS, EVENT_ACTION_START, EVENT_ACTION_END, EVENT_ACTION, getAdjustedSizes, ACTION_SELECT, ACTION_SCALE, getOffset, ACTION_MOVE, ACTION_RESIZE_NORTHWEST, ACTION_RESIZE_SOUTHWEST, ACTION_RESIZE_NORTHEAST, ACTION_RESIZE_SOUTHEAST, isNumber, isPlainObject, CROPPER_IMAGE, isFunction, ACTION_RESIZE_WEST, ACTION_RESIZE_EAST, ACTION_RESIZE_SOUTH, ACTION_RESIZE_NORTH } from '@cropper/utils';\n\nvar style = `:host{display:block;left:0;position:relative;right:0}:host([outlined]){outline:1px solid var(--theme-color)}:host([multiple]){outline:1px dashed hsla(0,0%,100%,.5)}:host([multiple]):after{bottom:0;content:\"\";cursor:pointer;display:block;left:0;position:absolute;right:0;top:0}:host([multiple][active]){outline-color:var(--theme-color);z-index:1}:host([multiple])>*{visibility:hidden}:host([multiple][active])>*{visibility:visible}:host([multiple][active]):after{display:none}`;\n\nconst canvasCache = new WeakMap();\nclass CropperSelection extends CropperElement {\n    constructor() {\n        super(...arguments);\n        this.$onCanvasAction = null;\n        this.$onCanvasActionStart = null;\n        this.$onCanvasActionEnd = null;\n        this.$onDocumentKeyDown = null;\n        this.$action = '';\n        this.$actionStartTarget = null;\n        this.$changing = false;\n        this.$style = style;\n        this.$initialSelection = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n        };\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.aspectRatio = NaN;\n        this.initialAspectRatio = NaN;\n        this.initialCoverage = NaN;\n        this.active = false;\n        // Deprecated as of v2.0.0-rc.0, use `dynamic` instead.\n        this.linked = false;\n        this.dynamic = false;\n        this.movable = false;\n        this.resizable = false;\n        this.zoomable = false;\n        this.multiple = false;\n        this.keyboard = false;\n        this.outlined = false;\n        this.precise = false;\n    }\n    set $canvas(element) {\n        canvasCache.set(this, element);\n    }\n    get $canvas() {\n        return canvasCache.get(this);\n    }\n    static get observedAttributes() {\n        return super.observedAttributes.concat([\n            'active',\n            'aspect-ratio',\n            'dynamic',\n            'height',\n            'initial-aspect-ratio',\n            'initial-coverage',\n            'keyboard',\n            'linked',\n            'movable',\n            'multiple',\n            'outlined',\n            'precise',\n            'resizable',\n            'width',\n            'x',\n            'y',\n            'zoomable',\n        ]);\n    }\n    $propertyChangedCallback(name, oldValue, newValue) {\n        if (Object.is(newValue, oldValue)) {\n            return;\n        }\n        super.$propertyChangedCallback(name, oldValue, newValue);\n        switch (name) {\n            case 'x':\n            case 'y':\n            case 'width':\n            case 'height':\n                if (!this.$changing) {\n                    this.$nextTick(() => {\n                        this.$change(this.x, this.y, this.width, this.height, this.aspectRatio, true);\n                    });\n                }\n                break;\n            case 'aspectRatio':\n            case 'initialAspectRatio':\n                this.$nextTick(() => {\n                    this.$initSelection();\n                });\n                break;\n            case 'initialCoverage':\n                this.$nextTick(() => {\n                    if (isPositiveNumber(newValue) && newValue <= 1) {\n                        this.$initSelection(true, true);\n                    }\n                });\n                break;\n            case 'keyboard':\n                this.$nextTick(() => {\n                    if (this.$canvas) {\n                        if (newValue) {\n                            if (!this.$onDocumentKeyDown) {\n                                this.$onDocumentKeyDown = this.$handleKeyDown.bind(this);\n                                on(this.ownerDocument, EVENT_KEYDOWN, this.$onDocumentKeyDown);\n                            }\n                        }\n                        else if (this.$onDocumentKeyDown) {\n                            off(this.ownerDocument, EVENT_KEYDOWN, this.$onDocumentKeyDown);\n                            this.$onDocumentKeyDown = null;\n                        }\n                    }\n                });\n                break;\n            case 'multiple':\n                this.$nextTick(() => {\n                    if (this.$canvas) {\n                        const selections = this.$getSelections();\n                        if (newValue) {\n                            selections.forEach((selection) => {\n                                selection.active = false;\n                            });\n                            this.active = true;\n                            this.$emit(EVENT_CHANGE, {\n                                x: this.x,\n                                y: this.y,\n                                width: this.width,\n                                height: this.height,\n                            });\n                        }\n                        else {\n                            this.active = false;\n                            selections.slice(1).forEach((selection) => {\n                                this.$removeSelection(selection);\n                            });\n                        }\n                    }\n                });\n                break;\n            case 'precise':\n                this.$nextTick(() => {\n                    this.$change(this.x, this.y);\n                });\n                break;\n            // Backwards compatible with 2.0.0-rc\n            case 'linked':\n                if (newValue) {\n                    this.dynamic = true;\n                }\n                break;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        const $canvas = this.closest(this.$getTagNameOf(CROPPER_CANVAS));\n        if ($canvas) {\n            this.$canvas = $canvas;\n            this.$setStyles({\n                position: 'absolute',\n                transform: `translate(${this.x}px, ${this.y}px)`,\n            });\n            if (!this.hidden) {\n                this.$render();\n            }\n            this.$initSelection(true);\n            this.$onCanvasActionStart = this.$handleActionStart.bind(this);\n            this.$onCanvasActionEnd = this.$handleActionEnd.bind(this);\n            this.$onCanvasAction = this.$handleAction.bind(this);\n            on($canvas, EVENT_ACTION_START, this.$onCanvasActionStart);\n            on($canvas, EVENT_ACTION_END, this.$onCanvasActionEnd);\n            on($canvas, EVENT_ACTION, this.$onCanvasAction);\n        }\n        else {\n            this.$render();\n        }\n    }\n    disconnectedCallback() {\n        const { $canvas } = this;\n        if ($canvas) {\n            if (this.$onCanvasActionStart) {\n                off($canvas, EVENT_ACTION_START, this.$onCanvasActionStart);\n                this.$onCanvasActionStart = null;\n            }\n            if (this.$onCanvasActionEnd) {\n                off($canvas, EVENT_ACTION_END, this.$onCanvasActionEnd);\n                this.$onCanvasActionEnd = null;\n            }\n            if (this.$onCanvasAction) {\n                off($canvas, EVENT_ACTION, this.$onCanvasAction);\n                this.$onCanvasAction = null;\n            }\n        }\n        super.disconnectedCallback();\n    }\n    $getSelections() {\n        let selections = [];\n        if (this.parentElement) {\n            selections = Array.from(this.parentElement.querySelectorAll(this.$getTagNameOf(CROPPER_SELECTION)));\n        }\n        return selections;\n    }\n    $initSelection(center = false, resize = false) {\n        const { initialCoverage, parentElement } = this;\n        if (isPositiveNumber(initialCoverage) && parentElement) {\n            const aspectRatio = this.aspectRatio || this.initialAspectRatio;\n            let width = (resize ? 0 : this.width) || parentElement.offsetWidth * initialCoverage;\n            let height = (resize ? 0 : this.height) || parentElement.offsetHeight * initialCoverage;\n            if (isPositiveNumber(aspectRatio)) {\n                ({ width, height } = getAdjustedSizes({ aspectRatio, width, height }));\n            }\n            this.$change(this.x, this.y, width, height);\n            if (center) {\n                this.$center();\n            }\n            // Overrides the initial position and size\n            this.$initialSelection = {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height,\n            };\n        }\n    }\n    $createSelection() {\n        const newSelection = this.cloneNode(true);\n        if (this.hasAttribute('id')) {\n            newSelection.removeAttribute('id');\n        }\n        newSelection.initialCoverage = NaN;\n        this.active = false;\n        if (this.parentElement) {\n            this.parentElement.insertBefore(newSelection, this.nextSibling);\n        }\n        return newSelection;\n    }\n    $removeSelection(selection = this) {\n        if (this.parentElement) {\n            const selections = this.$getSelections();\n            if (selections.length > 1) {\n                const index = selections.indexOf(selection);\n                const activeSelection = selections[index + 1] || selections[index - 1];\n                if (activeSelection) {\n                    selection.active = false;\n                    this.parentElement.removeChild(selection);\n                    activeSelection.active = true;\n                    activeSelection.$emit(EVENT_CHANGE, {\n                        x: activeSelection.x,\n                        y: activeSelection.y,\n                        width: activeSelection.width,\n                        height: activeSelection.height,\n                    });\n                }\n            }\n            else {\n                this.$clear();\n            }\n        }\n    }\n    $handleActionStart(event) {\n        var _a, _b;\n        const relatedTarget = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.relatedEvent) === null || _b === void 0 ? void 0 : _b.target;\n        this.$action = '';\n        this.$actionStartTarget = relatedTarget;\n        if (!this.hidden\n            && this.multiple\n            && !this.active\n            && relatedTarget === this\n            && this.parentElement) {\n            this.$getSelections().forEach((selection) => {\n                selection.active = false;\n            });\n            this.active = true;\n            this.$emit(EVENT_CHANGE, {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height,\n            });\n        }\n    }\n    $handleAction(event) {\n        const { currentTarget, detail } = event;\n        if (!currentTarget || !detail) {\n            return;\n        }\n        const { relatedEvent } = detail;\n        let { action } = detail;\n        // Switching to another selection\n        if (!action && this.multiple) {\n            // Get the `action` property from the focusing in selection\n            action = this.$action || (relatedEvent === null || relatedEvent === void 0 ? void 0 : relatedEvent.target.action);\n            this.$action = action;\n        }\n        if (!action\n            || (this.hidden && action !== ACTION_SELECT)\n            || (this.multiple && !this.active && action !== ACTION_SCALE)) {\n            return;\n        }\n        const moveX = detail.endX - detail.startX;\n        const moveY = detail.endY - detail.startY;\n        const { width, height } = this;\n        let { aspectRatio } = this;\n        // Locking aspect ratio by holding shift key\n        if (!isPositiveNumber(aspectRatio) && relatedEvent.shiftKey) {\n            aspectRatio = isPositiveNumber(width) && isPositiveNumber(height) ? width / height : 1;\n        }\n        switch (action) {\n            case ACTION_SELECT:\n                if (moveX !== 0 && moveY !== 0) {\n                    const { $canvas } = this;\n                    const offset = getOffset(currentTarget);\n                    (this.multiple && !this.hidden ? this.$createSelection() : this).$change(detail.startX - offset.left, detail.startY - offset.top, Math.abs(moveX), Math.abs(moveY), aspectRatio);\n                    if (moveX < 0) {\n                        if (moveY < 0) {\n                            // ↖️\n                            action = ACTION_RESIZE_NORTHWEST;\n                        }\n                        else if (moveY > 0) {\n                            // ↙️\n                            action = ACTION_RESIZE_SOUTHWEST;\n                        }\n                    }\n                    else if (moveX > 0) {\n                        if (moveY < 0) {\n                            // ↗️\n                            action = ACTION_RESIZE_NORTHEAST;\n                        }\n                        else if (moveY > 0) {\n                            // ↘️\n                            action = ACTION_RESIZE_SOUTHEAST;\n                        }\n                    }\n                    if ($canvas) {\n                        $canvas.$action = action;\n                    }\n                }\n                break;\n            case ACTION_MOVE:\n                if (this.movable && (this.dynamic\n                    || (this.$actionStartTarget && this.contains(this.$actionStartTarget)))) {\n                    this.$move(moveX, moveY);\n                }\n                break;\n            case ACTION_SCALE:\n                if (relatedEvent && this.zoomable && (this.dynamic\n                    || this.contains(relatedEvent.target))) {\n                    const offset = getOffset(currentTarget);\n                    this.$zoom(detail.scale, relatedEvent.pageX - offset.left, relatedEvent.pageY - offset.top);\n                }\n                break;\n            default:\n                this.$resize(action, moveX, moveY, aspectRatio);\n        }\n    }\n    $handleActionEnd() {\n        this.$action = '';\n        this.$actionStartTarget = null;\n    }\n    $handleKeyDown(event) {\n        if (this.hidden\n            || !this.keyboard\n            || (this.multiple && !this.active)\n            || event.defaultPrevented) {\n            return;\n        }\n        const { activeElement } = document;\n        // Disable keyboard control when input something\n        if (activeElement && (['INPUT', 'TEXTAREA'].includes(activeElement.tagName)\n            || ['true', 'plaintext-only'].includes(activeElement.contentEditable))) {\n            return;\n        }\n        switch (event.key) {\n            case 'Backspace':\n                if (event.metaKey) {\n                    event.preventDefault();\n                    this.$removeSelection();\n                }\n                break;\n            case 'Delete':\n                event.preventDefault();\n                this.$removeSelection();\n                break;\n            // Move to the left\n            case 'ArrowLeft':\n                event.preventDefault();\n                this.$move(-1, 0);\n                break;\n            // Move to the right\n            case 'ArrowRight':\n                event.preventDefault();\n                this.$move(1, 0);\n                break;\n            // Move to the top\n            case 'ArrowUp':\n                event.preventDefault();\n                this.$move(0, -1);\n                break;\n            // Move to the bottom\n            case 'ArrowDown':\n                event.preventDefault();\n                this.$move(0, 1);\n                break;\n            case '+':\n                event.preventDefault();\n                this.$zoom(0.1);\n                break;\n            case '-':\n                event.preventDefault();\n                this.$zoom(-0.1);\n                break;\n        }\n    }\n    /**\n     * Aligns the selection to the center of its parent element.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $center() {\n        const { parentElement } = this;\n        if (!parentElement) {\n            return this;\n        }\n        const x = (parentElement.offsetWidth - this.width) / 2;\n        const y = (parentElement.offsetHeight - this.height) / 2;\n        return this.$change(x, y);\n    }\n    /**\n     * Moves the selection.\n     * @param {number} x The moving distance in the horizontal direction.\n     * @param {number} [y] The moving distance in the vertical direction.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $move(x, y = x) {\n        return this.$moveTo(this.x + x, this.y + y);\n    }\n    /**\n     * Moves the selection to a specific position.\n     * @param {number} x The new position in the horizontal direction.\n     * @param {number} [y] The new position in the vertical direction.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $moveTo(x, y = x) {\n        if (!this.movable) {\n            return this;\n        }\n        return this.$change(x, y);\n    }\n    /**\n     * Adjusts the size the selection on a specific side or corner.\n     * @param {string} action Indicates the side or corner to resize.\n     * @param {number} [offsetX] The horizontal offset of the specific side or corner.\n     * @param {number} [offsetY] The vertical offset of the specific side or corner.\n     * @param {number} [aspectRatio] The aspect ratio for computing the new size if it is necessary.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $resize(action, offsetX = 0, offsetY = 0, aspectRatio = this.aspectRatio) {\n        if (!this.resizable) {\n            return this;\n        }\n        const hasValidAspectRatio = isPositiveNumber(aspectRatio);\n        const { $canvas } = this;\n        let { x, y, width, height, } = this;\n        switch (action) {\n            case ACTION_RESIZE_NORTH:\n                y += offsetY;\n                height -= offsetY;\n                if (height < 0) {\n                    action = ACTION_RESIZE_SOUTH;\n                    height = -height;\n                    y -= height;\n                }\n                if (hasValidAspectRatio) {\n                    offsetX = offsetY * aspectRatio;\n                    x += offsetX / 2;\n                    width -= offsetX;\n                    if (width < 0) {\n                        width = -width;\n                        x -= width;\n                    }\n                }\n                break;\n            case ACTION_RESIZE_EAST:\n                width += offsetX;\n                if (width < 0) {\n                    action = ACTION_RESIZE_WEST;\n                    width = -width;\n                    x -= width;\n                }\n                if (hasValidAspectRatio) {\n                    offsetY = offsetX / aspectRatio;\n                    y -= offsetY / 2;\n                    height += offsetY;\n                    if (height < 0) {\n                        height = -height;\n                        y -= height;\n                    }\n                }\n                break;\n            case ACTION_RESIZE_SOUTH:\n                height += offsetY;\n                if (height < 0) {\n                    action = ACTION_RESIZE_NORTH;\n                    height = -height;\n                    y -= height;\n                }\n                if (hasValidAspectRatio) {\n                    offsetX = offsetY * aspectRatio;\n                    x -= offsetX / 2;\n                    width += offsetX;\n                    if (width < 0) {\n                        width = -width;\n                        x -= width;\n                    }\n                }\n                break;\n            case ACTION_RESIZE_WEST:\n                x += offsetX;\n                width -= offsetX;\n                if (width < 0) {\n                    action = ACTION_RESIZE_EAST;\n                    width = -width;\n                    x -= width;\n                }\n                if (hasValidAspectRatio) {\n                    offsetY = offsetX / aspectRatio;\n                    y += offsetY / 2;\n                    height -= offsetY;\n                    if (height < 0) {\n                        height = -height;\n                        y -= height;\n                    }\n                }\n                break;\n            case ACTION_RESIZE_NORTHEAST:\n                if (hasValidAspectRatio) {\n                    offsetY = -offsetX / aspectRatio;\n                }\n                y += offsetY;\n                height -= offsetY;\n                width += offsetX;\n                if (width < 0 && height < 0) {\n                    action = ACTION_RESIZE_SOUTHWEST;\n                    width = -width;\n                    height = -height;\n                    x -= width;\n                    y -= height;\n                }\n                else if (width < 0) {\n                    action = ACTION_RESIZE_NORTHWEST;\n                    width = -width;\n                    x -= width;\n                }\n                else if (height < 0) {\n                    action = ACTION_RESIZE_SOUTHEAST;\n                    height = -height;\n                    y -= height;\n                }\n                break;\n            case ACTION_RESIZE_NORTHWEST:\n                if (hasValidAspectRatio) {\n                    offsetY = offsetX / aspectRatio;\n                }\n                x += offsetX;\n                y += offsetY;\n                width -= offsetX;\n                height -= offsetY;\n                if (width < 0 && height < 0) {\n                    action = ACTION_RESIZE_SOUTHEAST;\n                    width = -width;\n                    height = -height;\n                    x -= width;\n                    y -= height;\n                }\n                else if (width < 0) {\n                    action = ACTION_RESIZE_NORTHEAST;\n                    width = -width;\n                    x -= width;\n                }\n                else if (height < 0) {\n                    action = ACTION_RESIZE_SOUTHWEST;\n                    height = -height;\n                    y -= height;\n                }\n                break;\n            case ACTION_RESIZE_SOUTHEAST:\n                if (hasValidAspectRatio) {\n                    offsetY = offsetX / aspectRatio;\n                }\n                width += offsetX;\n                height += offsetY;\n                if (width < 0 && height < 0) {\n                    action = ACTION_RESIZE_NORTHWEST;\n                    width = -width;\n                    height = -height;\n                    x -= width;\n                    y -= height;\n                }\n                else if (width < 0) {\n                    action = ACTION_RESIZE_SOUTHWEST;\n                    width = -width;\n                    x -= width;\n                }\n                else if (height < 0) {\n                    action = ACTION_RESIZE_NORTHEAST;\n                    height = -height;\n                    y -= height;\n                }\n                break;\n            case ACTION_RESIZE_SOUTHWEST:\n                if (hasValidAspectRatio) {\n                    offsetY = -offsetX / aspectRatio;\n                }\n                x += offsetX;\n                width -= offsetX;\n                height += offsetY;\n                if (width < 0 && height < 0) {\n                    action = ACTION_RESIZE_NORTHEAST;\n                    width = -width;\n                    height = -height;\n                    x -= width;\n                    y -= height;\n                }\n                else if (width < 0) {\n                    action = ACTION_RESIZE_SOUTHEAST;\n                    width = -width;\n                    x -= width;\n                }\n                else if (height < 0) {\n                    action = ACTION_RESIZE_NORTHWEST;\n                    height = -height;\n                    y -= height;\n                }\n                break;\n        }\n        if ($canvas) {\n            $canvas.$setAction(action);\n        }\n        return this.$change(x, y, width, height);\n    }\n    /**\n     * Zooms the selection.\n     * @param {number} scale The zoom factor. Positive numbers for zooming in, and negative numbers for zooming out.\n     * @param {number} [x] The zoom origin in the horizontal, defaults to the center of the selection.\n     * @param {number} [y] The zoom origin in the vertical, defaults to the center of the selection.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $zoom(scale, x, y) {\n        if (!this.zoomable || scale === 0) {\n            return this;\n        }\n        if (scale < 0) {\n            scale = 1 / (1 - scale);\n        }\n        else {\n            scale += 1;\n        }\n        const { width, height } = this;\n        const newWidth = width * scale;\n        const newHeight = height * scale;\n        let newX = this.x;\n        let newY = this.y;\n        if (isNumber(x) && isNumber(y)) {\n            newX -= (newWidth - width) * ((x - this.x) / width);\n            newY -= (newHeight - height) * ((y - this.y) / height);\n        }\n        else {\n            // Zoom from the center of the selection\n            newX -= (newWidth - width) / 2;\n            newY -= (newHeight - height) / 2;\n        }\n        return this.$change(newX, newY, newWidth, newHeight);\n    }\n    /**\n     * Changes the position and/or size of the selection.\n     * @param {number} x The new position in the horizontal direction.\n     * @param {number} y The new position in the vertical direction.\n     * @param {number} [width] The new width.\n     * @param {number} [height] The new height.\n     * @param {number} [aspectRatio] The new aspect ratio for this change only.\n     * @param {number} [_force] Force change.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $change(x, y, width = this.width, height = this.height, aspectRatio = this.aspectRatio, _force = false) {\n        if (this.$changing\n            || !isNumber(x)\n            || !isNumber(y)\n            || !isNumber(width)\n            || !isNumber(height)\n            || width < 0\n            || height < 0) {\n            return this;\n        }\n        if (isPositiveNumber(aspectRatio)) {\n            ({ width, height } = getAdjustedSizes({ aspectRatio, width, height }, 'cover'));\n        }\n        if (!this.precise) {\n            x = Math.round(x);\n            y = Math.round(y);\n            width = Math.round(width);\n            height = Math.round(height);\n        }\n        if (x === this.x\n            && y === this.y\n            && width === this.width\n            && height === this.height\n            && Object.is(aspectRatio, this.aspectRatio)\n            && !_force) {\n            return this;\n        }\n        if (this.hidden) {\n            this.hidden = false;\n        }\n        if (this.$emit(EVENT_CHANGE, {\n            x,\n            y,\n            width,\n            height,\n        }) === false) {\n            return this;\n        }\n        this.$changing = true;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.$changing = false;\n        return this.$render();\n    }\n    /**\n     * Resets the selection to its initial position and size.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $reset() {\n        const { x, y, width, height, } = this.$initialSelection;\n        return this.$change(x, y, width, height);\n    }\n    /**\n     * Clears the selection.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $clear() {\n        this.$change(0, 0, 0, 0, NaN, true);\n        this.hidden = true;\n        return this;\n    }\n    /**\n     * Refreshes the position or size of the selection.\n     * @returns {CropperSelection} Returns `this` for chaining.\n     */\n    $render() {\n        return this.$setStyles({\n            transform: `translate(${this.x}px, ${this.y}px)`,\n            width: this.width,\n            height: this.height,\n        });\n    }\n    /**\n     * Generates a real canvas element, with the image (selected area only) draw into if there is one.\n     * @param {object} [options] The available options.\n     * @param {number} [options.width] The width of the canvas.\n     * @param {number} [options.height] The height of the canvas.\n     * @param {Function} [options.beforeDraw] The function called before drawing the image onto the canvas.\n     * @returns {Promise} Returns a promise that resolves to the generated canvas element.\n     */\n    $toCanvas(options) {\n        return new Promise((resolve, reject) => {\n            if (!this.isConnected) {\n                reject(new Error('The current element is not connected to the DOM.'));\n                return;\n            }\n            const canvas = document.createElement('canvas');\n            let { width, height } = this;\n            let scale = 1;\n            if (isPlainObject(options)\n                && (isPositiveNumber(options.width) || isPositiveNumber(options.height))) {\n                ({ width, height } = getAdjustedSizes({\n                    aspectRatio: width / height,\n                    width: options.width,\n                    height: options.height,\n                }));\n                scale = width / this.width;\n            }\n            canvas.width = width;\n            canvas.height = height;\n            if (!this.$canvas) {\n                resolve(canvas);\n                return;\n            }\n            const cropperImage = this.$canvas.querySelector(this.$getTagNameOf(CROPPER_IMAGE));\n            if (!cropperImage) {\n                resolve(canvas);\n                return;\n            }\n            cropperImage.$ready().then((image) => {\n                const context = canvas.getContext('2d');\n                if (context) {\n                    const [a, b, c, d, e, f] = cropperImage.$getTransform();\n                    const offsetX = -this.x;\n                    const offsetY = -this.y;\n                    const translateX = ((offsetX * d) - (c * offsetY)) / ((a * d) - (c * b));\n                    const translateY = ((offsetY * a) - (b * offsetX)) / ((a * d) - (c * b));\n                    let newE = a * translateX + c * translateY + e;\n                    let newF = b * translateX + d * translateY + f;\n                    let destWidth = image.naturalWidth;\n                    let destHeight = image.naturalHeight;\n                    if (scale !== 1) {\n                        newE *= scale;\n                        newF *= scale;\n                        destWidth *= scale;\n                        destHeight *= scale;\n                    }\n                    const centerX = destWidth / 2;\n                    const centerY = destHeight / 2;\n                    context.fillStyle = 'transparent';\n                    context.fillRect(0, 0, width, height);\n                    if (isPlainObject(options) && isFunction(options.beforeDraw)) {\n                        options.beforeDraw.call(this, context, canvas);\n                    }\n                    context.save();\n                    // Move the transform origin to the center of the image.\n                    // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\n                    context.translate(centerX, centerY);\n                    context.transform(a, b, c, d, newE, newF);\n                    // Move the transform origin to the top-left of the image.\n                    context.translate(-centerX, -centerY);\n                    context.drawImage(image, 0, 0, destWidth, destHeight);\n                    context.restore();\n                }\n                resolve(canvas);\n            }).catch(reject);\n        });\n    }\n}\nCropperSelection.$name = CROPPER_SELECTION;\nCropperSelection.$version = '2.0.0';\n\nexport { CropperSelection as default };\n", "import CropperElement from '@cropper/element';\nimport { CROPPER_GIRD } from '@cropper/utils';\n\nvar style = `:host{display:flex;flex-direction:column;position:relative;touch-action:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}:host([bordered]){border:1px dashed var(--theme-color)}:host([covered]){bottom:0;left:0;position:absolute;right:0;top:0}:host>span{display:flex;flex:1}:host>span+span{border-top:1px dashed var(--theme-color)}:host>span>span{flex:1}:host>span>span+span{border-left:1px dashed var(--theme-color)}`;\n\nclass CropperGrid extends CropperElement {\n    constructor() {\n        super(...arguments);\n        this.$style = style;\n        this.bordered = false;\n        this.columns = 3;\n        this.covered = false;\n        this.rows = 3;\n        this.slottable = false;\n        this.themeColor = 'rgba(238, 238, 238, 0.5)';\n    }\n    static get observedAttributes() {\n        return super.observedAttributes.concat([\n            'bordered',\n            'columns',\n            'covered',\n            'rows',\n        ]);\n    }\n    $propertyChangedCallback(name, oldValue, newValue) {\n        if (Object.is(newValue, oldValue)) {\n            return;\n        }\n        super.$propertyChangedCallback(name, oldValue, newValue);\n        if (name === 'rows' || name === 'columns') {\n            this.$nextTick(() => {\n                this.$render();\n            });\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.$render();\n    }\n    $render() {\n        const shadow = this.$getShadowRoot();\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < this.rows; i += 1) {\n            const row = document.createElement('span');\n            row.setAttribute('role', 'row');\n            for (let j = 0; j < this.columns; j += 1) {\n                const column = document.createElement('span');\n                column.setAttribute('role', 'gridcell');\n                row.appendChild(column);\n            }\n            fragment.appendChild(row);\n        }\n        if (shadow) {\n            shadow.innerHTML = '';\n            shadow.appendChild(fragment);\n        }\n    }\n}\nCropperGrid.$name = CROPPER_GIRD;\nCropperGrid.$version = '2.0.0';\n\nexport { CropperGrid as default };\n", "import CropperElement from '@cropper/element';\nimport { CROPPER_CROSSHAIR } from '@cropper/utils';\n\nvar style = `:host{display:inline-block;height:1em;position:relative;touch-action:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle;width:1em}:host:after,:host:before{background-color:var(--theme-color);content:\"\";display:block;position:absolute}:host:before{height:1px;left:0;top:50%;transform:translateY(-50%);width:100%}:host:after{height:100%;left:50%;top:0;transform:translateX(-50%);width:1px}:host([centered]){left:50%;position:absolute;top:50%;transform:translate(-50%,-50%)}`;\n\nclass CropperCrosshair extends CropperElement {\n    constructor() {\n        super(...arguments);\n        this.$style = style;\n        this.centered = false;\n        this.slottable = false;\n        this.themeColor = 'rgba(238, 238, 238, 0.5)';\n    }\n    static get observedAttributes() {\n        return super.observedAttributes.concat([\n            'centered',\n        ]);\n    }\n}\nCropperCrosshair.$name = CROPPER_CROSSHAIR;\nCropperCrosshair.$version = '2.0.0';\n\nexport { CropperCrosshair as default };\n", "import CropperElement from '@cropper/element';\nimport { CROPPER_VIEWER, CROPPER_SELECTION, isElement, on, EVENT_CHANGE, CROPPER_CANVAS, CROPPER_IMAGE, EVENT_LOAD, EVENT_TRANSFORM, off } from '@cropper/utils';\n\nvar style = `:host{display:block;height:100%;overflow:hidden;position:relative;width:100%}`;\n\nconst canvasCache = new WeakMap();\nconst imageCache = new WeakMap();\nconst selectionCache = new WeakMap();\nconst sourceImageCache = new WeakMap();\nconst RESIZE_BOTH = 'both';\nconst RESIZE_HORIZONTAL = 'horizontal';\nconst RESIZE_VERTICAL = 'vertical';\nconst RESIZE_NONE = 'none';\nclass CropperViewer extends CropperElement {\n    constructor() {\n        super(...arguments);\n        this.$onSelectionChange = null;\n        this.$onSourceImageLoad = null;\n        this.$onSourceImageTransform = null;\n        this.$scale = 1;\n        this.$style = style;\n        this.resize = RESIZE_VERTICAL;\n        this.selection = '';\n        this.slottable = false;\n    }\n    set $image(element) {\n        imageCache.set(this, element);\n    }\n    get $image() {\n        return imageCache.get(this);\n    }\n    set $sourceImage(element) {\n        sourceImageCache.set(this, element);\n    }\n    get $sourceImage() {\n        return sourceImageCache.get(this);\n    }\n    set $canvas(element) {\n        canvasCache.set(this, element);\n    }\n    get $canvas() {\n        return canvasCache.get(this);\n    }\n    set $selection(element) {\n        selectionCache.set(this, element);\n    }\n    get $selection() {\n        return selectionCache.get(this);\n    }\n    static get observedAttributes() {\n        return super.observedAttributes.concat([\n            'resize',\n            'selection',\n        ]);\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        let $selection = null;\n        if (this.selection) {\n            $selection = this.ownerDocument.querySelector(this.selection);\n        }\n        else {\n            $selection = this.closest(this.$getTagNameOf(CROPPER_SELECTION));\n        }\n        if (isElement($selection)) {\n            this.$selection = $selection;\n            this.$onSelectionChange = this.$handleSelectionChange.bind(this);\n            on($selection, EVENT_CHANGE, this.$onSelectionChange);\n            const $canvas = $selection.closest(this.$getTagNameOf(CROPPER_CANVAS));\n            if ($canvas) {\n                this.$canvas = $canvas;\n                const $sourceImage = $canvas.querySelector(this.$getTagNameOf(CROPPER_IMAGE));\n                if ($sourceImage) {\n                    this.$sourceImage = $sourceImage;\n                    this.$image = $sourceImage.cloneNode(true);\n                    this.$getShadowRoot().appendChild(this.$image);\n                    this.$onSourceImageLoad = this.$handleSourceImageLoad.bind(this);\n                    this.$onSourceImageTransform = this.$handleSourceImageTransform.bind(this);\n                    on($sourceImage.$image, EVENT_LOAD, this.$onSourceImageLoad);\n                    on($sourceImage, EVENT_TRANSFORM, this.$onSourceImageTransform);\n                }\n            }\n            this.$render();\n        }\n    }\n    disconnectedCallback() {\n        const { $selection, $sourceImage } = this;\n        if ($selection && this.$onSelectionChange) {\n            off($selection, EVENT_CHANGE, this.$onSelectionChange);\n            this.$onSelectionChange = null;\n        }\n        if ($sourceImage && this.$onSourceImageLoad) {\n            off($sourceImage.$image, EVENT_LOAD, this.$onSourceImageLoad);\n            this.$onSourceImageLoad = null;\n        }\n        if ($sourceImage && this.$onSourceImageTransform) {\n            off($sourceImage, EVENT_TRANSFORM, this.$onSourceImageTransform);\n            this.$onSourceImageTransform = null;\n        }\n        super.disconnectedCallback();\n    }\n    $handleSelectionChange(event) {\n        this.$render(event.detail);\n    }\n    $handleSourceImageLoad() {\n        const { $image, $sourceImage } = this;\n        const oldSrc = $image.getAttribute('src');\n        const newSrc = $sourceImage.getAttribute('src');\n        if (newSrc && newSrc !== oldSrc) {\n            $image.setAttribute('src', newSrc);\n            $image.$ready(() => {\n                setTimeout(() => {\n                    this.$render();\n                }, 50);\n            });\n        }\n    }\n    $handleSourceImageTransform(event) {\n        this.$render(undefined, event.detail.matrix);\n    }\n    $render(selection, matrix) {\n        const { $canvas, $selection } = this;\n        if (!selection && !$selection.hidden) {\n            selection = $selection;\n        }\n        if (!selection || (selection.x === 0\n            && selection.y === 0\n            && selection.width === 0\n            && selection.height === 0)) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: $canvas.offsetWidth,\n                height: $canvas.offsetHeight,\n            };\n        }\n        const { x, y, width, height, } = selection;\n        const styles = {};\n        const { clientWidth, clientHeight } = this;\n        let newWidth = clientWidth;\n        let newHeight = clientHeight;\n        let scale = NaN;\n        switch (this.resize) {\n            case RESIZE_BOTH:\n                scale = 1;\n                newWidth = width;\n                newHeight = height;\n                styles.width = width;\n                styles.height = height;\n                break;\n            case RESIZE_HORIZONTAL:\n                scale = height > 0 ? clientHeight / height : 0;\n                newWidth = width * scale;\n                styles.width = newWidth;\n                break;\n            case RESIZE_VERTICAL:\n                scale = width > 0 ? clientWidth / width : 0;\n                newHeight = height * scale;\n                styles.height = newHeight;\n                break;\n            case RESIZE_NONE:\n            default:\n                if (clientWidth > 0) {\n                    scale = width > 0 ? clientWidth / width : 0;\n                }\n                else if (clientHeight > 0) {\n                    scale = height > 0 ? clientHeight / height : 0;\n                }\n        }\n        this.$scale = scale;\n        this.$setStyles(styles);\n        if (this.$sourceImage) {\n            this.$transformImageByOffset(matrix !== null && matrix !== void 0 ? matrix : this.$sourceImage.$getTransform(), -x, -y);\n        }\n    }\n    $transformImageByOffset(matrix, x, y) {\n        const { $image, $scale, $sourceImage, } = this;\n        if ($sourceImage && $image && $scale >= 0) {\n            const [a, b, c, d, e, f] = matrix;\n            const translateX = ((x * d) - (c * y)) / ((a * d) - (c * b));\n            const translateY = ((y * a) - (b * x)) / ((a * d) - (c * b));\n            const newE = a * translateX + c * translateY + e;\n            const newF = b * translateX + d * translateY + f;\n            $image.$ready((image) => {\n                this.$setStyles.call($image, {\n                    width: image.naturalWidth * $scale,\n                    height: image.naturalHeight * $scale,\n                });\n            });\n            $image.$setTransform(a, b, c, d, newE * $scale, newF * $scale);\n        }\n    }\n}\nCropperViewer.$name = CROPPER_VIEWER;\nCropperViewer.$version = '2.0.0';\n\nexport { RESIZE_BOTH, RESIZE_HORIZONTAL, RESIZE_NONE, RESIZE_VERTICAL, CropperViewer as default };\n", "/*! Cropper.js v2.0.0 | (c) 2015-present Chen Fengyuan | MIT */\nimport { isString, isElement, CROPPER_IMAGE, CROPPER_CANVAS, CROPPER_SELECTION } from '@cropper/utils';\nexport * from '@cropper/utils';\nimport { CropperCanvas, CropperCrosshair, CropperGrid, CropperHandle, CropperImage, CropperSelection, CropperShade, CropperViewer } from '@cropper/elements';\nexport * from '@cropper/elements';\n\nvar DEFAULT_TEMPLATE = ('<cropper-canvas background>'\n    + '<cropper-image rotatable scalable skewable translatable></cropper-image>'\n    + '<cropper-shade hidden></cropper-shade>'\n    + '<cropper-handle action=\"select\" plain></cropper-handle>'\n    + '<cropper-selection initial-coverage=\"0.5\" movable resizable>'\n    + '<cropper-grid role=\"grid\" bordered covered></cropper-grid>'\n    + '<cropper-crosshair centered></cropper-crosshair>'\n    + '<cropper-handle action=\"move\" theme-color=\"rgba(255, 255, 255, 0.35)\"></cropper-handle>'\n    + '<cropper-handle action=\"n-resize\"></cropper-handle>'\n    + '<cropper-handle action=\"e-resize\"></cropper-handle>'\n    + '<cropper-handle action=\"s-resize\"></cropper-handle>'\n    + '<cropper-handle action=\"w-resize\"></cropper-handle>'\n    + '<cropper-handle action=\"ne-resize\"></cropper-handle>'\n    + '<cropper-handle action=\"nw-resize\"></cropper-handle>'\n    + '<cropper-handle action=\"se-resize\"></cropper-handle>'\n    + '<cropper-handle action=\"sw-resize\"></cropper-handle>'\n    + '</cropper-selection>'\n    + '</cropper-canvas>');\n\nconst REGEXP_ALLOWED_ELEMENTS = /^img|canvas$/;\nconst REGEXP_BLOCKED_TAGS = /<(\\/?(?:script|style)[^>]*)>/gi;\nconst DEFAULT_OPTIONS = {\n    template: DEFAULT_TEMPLATE,\n};\nCropperCanvas.$define();\nCropperCrosshair.$define();\nCropperGrid.$define();\nCropperHandle.$define();\nCropperImage.$define();\nCropperSelection.$define();\nCropperShade.$define();\nCropperViewer.$define();\nclass Cropper {\n    constructor(element, options) {\n        this.options = DEFAULT_OPTIONS;\n        if (isString(element)) {\n            element = document.querySelector(element);\n        }\n        if (!isElement(element) || !REGEXP_ALLOWED_ELEMENTS.test(element.localName)) {\n            throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n        }\n        this.element = element;\n        options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n        this.options = options;\n        const { ownerDocument } = element;\n        let { container } = options;\n        if (container) {\n            if (isString(container)) {\n                container = ownerDocument.querySelector(container);\n            }\n            if (!isElement(container)) {\n                throw new Error('The `container` option must be an element or a valid selector.');\n            }\n        }\n        if (!isElement(container)) {\n            if (element.parentElement) {\n                container = element.parentElement;\n            }\n            else {\n                container = ownerDocument.body;\n            }\n        }\n        this.container = container;\n        const tagName = element.localName;\n        let src = '';\n        if (tagName === 'img') {\n            ({ src } = element);\n        }\n        else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n            src = element.toDataURL();\n        }\n        const { template } = options;\n        if (template && isString(template)) {\n            const templateElement = document.createElement('template');\n            const documentFragment = document.createDocumentFragment();\n            templateElement.innerHTML = template.replace(REGEXP_BLOCKED_TAGS, '&lt;$1&gt;');\n            documentFragment.appendChild(templateElement.content);\n            Array.from(documentFragment.querySelectorAll(CROPPER_IMAGE)).forEach((image) => {\n                image.setAttribute('src', src);\n                image.setAttribute('alt', element.alt || 'The image to crop');\n            });\n            if (element.parentElement) {\n                element.style.display = 'none';\n                container.insertBefore(documentFragment, element.nextSibling);\n            }\n            else {\n                container.appendChild(documentFragment);\n            }\n        }\n    }\n    getCropperCanvas() {\n        return this.container.querySelector(CROPPER_CANVAS);\n    }\n    getCropperImage() {\n        return this.container.querySelector(CROPPER_IMAGE);\n    }\n    getCropperSelection() {\n        return this.container.querySelector(CROPPER_SELECTION);\n    }\n    getCropperSelections() {\n        return this.container.querySelectorAll(CROPPER_SELECTION);\n    }\n}\nCropper.version = '2.0.0';\n\nexport { DEFAULT_TEMPLATE, Cropper as default };\n"],
  "mappings": ";AAAA,IAAM,aAAa,OAAO,WAAW,eAAe,OAAO,OAAO,aAAa;AAC/E,IAAM,SAAS,aAAa,SAAS,CAAC;AACtC,IAAM,kBAAkB,aAAa,kBAAkB,OAAO,SAAS,kBAAkB;AACzF,IAAM,oBAAoB,aAAa,kBAAkB,SAAS;AAClE,IAAM,YAAY;AAClB,IAAM,iBAAiB,GAAG,SAAS;AACnC,IAAM,oBAAoB,GAAG,SAAS;AACtC,IAAM,eAAe,GAAG,SAAS;AACjC,IAAM,iBAAiB,GAAG,SAAS;AACnC,IAAM,gBAAgB,GAAG,SAAS;AAClC,IAAM,oBAAoB,GAAG,SAAS;AACtC,IAAM,gBAAgB,GAAG,SAAS;AAClC,IAAM,iBAAiB,GAAG,SAAS;AAEnC,IAAM,gBAAgB;AACtB,IAAM,cAAc;AACpB,IAAM,eAAe;AACrB,IAAM,gBAAgB;AACtB,IAAM,mBAAmB;AACzB,IAAM,cAAc;AACpB,IAAM,sBAAsB;AAC5B,IAAM,qBAAqB;AAC3B,IAAM,sBAAsB;AAC5B,IAAM,qBAAqB;AAC3B,IAAM,0BAA0B;AAChC,IAAM,0BAA0B;AAChC,IAAM,0BAA0B;AAChC,IAAM,0BAA0B;AAEhC,IAAM,mBAAmB;AAEzB,IAAM,kBAAkB,kBAAkB,yBAAyB;AACnE,IAAM,mBAAmB,kBAAkB,cAAc;AACzD,IAAM,oBAAoB,kBAAkB,eAAe;AAC3D,IAAM,qBAAqB,oBAAoB,gBAAgB;AAC/D,IAAM,qBAAqB,oBAAoB,gBAAgB;AAC/D,IAAM,mBAAmB,oBAAoB,4BAA4B;AACzE,IAAM,cAAc;AACpB,IAAM,gBAAgB;AACtB,IAAM,aAAa;AACnB,IAAM,eAAe;AACrB,IAAM,cAAc;AAEpB,IAAM,eAAe;AACrB,IAAM,mBAAmB;AACzB,IAAM,oBAAoB;AAC1B,IAAM,qBAAqB;AAC3B,IAAM,eAAe;AACrB,IAAM,kBAAkB;AAOxB,SAAS,SAAS,OAAO;AACrB,SAAO,OAAO,UAAU;AAC5B;AAIA,IAAM,QAAQ,OAAO,SAAS,OAAO;AAMrC,SAAS,SAAS,OAAO;AACrB,SAAO,OAAO,UAAU,YAAY,CAAC,MAAM,KAAK;AACpD;AAMA,SAAS,iBAAiB,OAAO;AAC7B,SAAO,SAAS,KAAK,KAAK,QAAQ,KAAK,QAAQ;AACnD;AAMA,SAAS,YAAY,OAAO;AACxB,SAAO,OAAO,UAAU;AAC5B;AAMA,SAAS,SAAS,OAAO;AACrB,SAAO,OAAO,UAAU,YAAY,UAAU;AAClD;AACA,IAAM,EAAE,eAAe,IAAI,OAAO;AAMlC,SAAS,cAAc,OAAO;AAC1B,MAAI,CAAC,SAAS,KAAK,GAAG;AAClB,WAAO;AAAA,EACX;AACA,MAAI;AACA,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,EAAE,UAAU,IAAI;AACtB,WAAO,eAAe,aAAa,eAAe,KAAK,WAAW,eAAe;AAAA,EACrF,SACO,OAAO;AACV,WAAO;AAAA,EACX;AACJ;AAMA,SAAS,WAAW,OAAO;AACvB,SAAO,OAAO,UAAU;AAC5B;AAMA,SAAS,UAAU,MAAM;AACrB,SAAO,OAAO,SAAS,YAAY,SAAS,QAAQ,KAAK,aAAa;AAC1E;AACA,IAAM,oBAAoB;AAM1B,SAAS,YAAY,OAAO;AACxB,SAAO,OAAO,KAAK,EAAE,QAAQ,mBAAmB,OAAO,EAAE,YAAY;AACzE;AACA,IAAM,oBAAoB;AAM1B,SAAS,YAAY,OAAO;AACxB,SAAO,MAAM,QAAQ,mBAAmB,CAAC,cAAc,UAAU,MAAM,CAAC,EAAE,YAAY,CAAC;AAC3F;AACA,IAAM,gBAAgB;AAStB,SAAS,IAAI,QAAQ,OAAO,UAAU,SAAS;AAC3C,QAAM,KAAK,EAAE,MAAM,aAAa,EAAE,QAAQ,CAAC,SAAS;AAChD,WAAO,oBAAoB,MAAM,UAAU,OAAO;AAAA,EACtD,CAAC;AACL;AASA,SAAS,GAAG,QAAQ,OAAO,UAAU,SAAS;AAC1C,QAAM,KAAK,EAAE,MAAM,aAAa,EAAE,QAAQ,CAAC,SAAS;AAChD,WAAO,iBAAiB,MAAM,UAAU,OAAO;AAAA,EACnD,CAAC;AACL;AAQA,SAAS,KAAK,QAAQ,OAAO,UAAU,SAAS;AAC5C,KAAG,QAAQ,OAAO,UAAU,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,GAAG,EAAE,MAAM,KAAK,CAAC,CAAC;AACzF;AACA,IAAM,sBAAsB;AAAA,EACxB,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AACd;AAUA,SAAS,KAAK,QAAQ,MAAM,QAAQ,SAAS;AACzC,SAAO,OAAO,cAAc,IAAI,YAAY,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,mBAAmB,GAAG,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAChJ;AACA,IAAM,kBAAkB,QAAQ,QAAQ;AAOxC,SAAS,SAAS,SAAS,UAAU;AACjC,SAAO,WACD,gBAAgB,KAAK,UAAU,SAAS,KAAK,OAAO,IAAI,QAAQ,IAChE;AACV;AAMA,SAAS,UAAU,SAAS;AACxB,QAAM,EAAE,gBAAgB,IAAI,QAAQ;AACpC,QAAM,MAAM,QAAQ,sBAAsB;AAC1C,SAAO;AAAA,IACH,MAAM,IAAI,QAAQ,OAAO,cAAc,gBAAgB;AAAA,IACvD,KAAK,IAAI,OAAO,OAAO,cAAc,gBAAgB;AAAA,EACzD;AACJ;AACA,IAAM,oBAAoB;AAO1B,SAAS,gBAAgB,OAAO;AAC5B,QAAM,QAAQ,WAAW,KAAK,KAAK;AACnC,MAAI,UAAU,GAAG;AACb,UAAM,CAAC,OAAO,KAAK,IAAI,OAAO,KAAK,EAAE,MAAM,iBAAiB,KAAK,CAAC;AAClE,YAAQ,KAAK,YAAY,GAAG;AAAA,MACxB,KAAK;AACD,eAAQ,QAAQ,OAAQ,KAAK,KAAK;AAAA,MACtC,KAAK;AACD,eAAQ,QAAQ,OAAQ,KAAK,KAAK;AAAA,MACtC,KAAK;AACD,eAAO,SAAS,KAAK,KAAK;AAAA,IAClC;AAAA,EACJ;AACA,SAAO;AACX;AACA,IAAM,+BAA+B;AACrC,IAAM,6BAA6B;AAOnC,SAAS,iBAAiB,MAAM,OAAO,8BAA8B;AACjE,QAAM,EAAE,YAAY,IAAI;AACxB,MAAI,EAAE,OAAO,OAAO,IAAI;AACxB,QAAM,eAAe,iBAAiB,KAAK;AAC3C,QAAM,gBAAgB,iBAAiB,MAAM;AAC7C,MAAI,gBAAgB,eAAe;AAC/B,UAAM,gBAAgB,SAAS;AAC/B,QAAK,SAAS,gCAAgC,gBAAgB,SACtD,SAAS,8BAA8B,gBAAgB,OAAQ;AACnE,eAAS,QAAQ;AAAA,IACrB,OACK;AACD,cAAQ,SAAS;AAAA,IACrB;AAAA,EACJ,WACS,cAAc;AACnB,aAAS,QAAQ;AAAA,EACrB,WACS,eAAe;AACpB,YAAQ,SAAS;AAAA,EACrB;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AACJ;AAOA,SAAS,iBAAiB,WAAW,MAAM;AACvC,MAAI,KAAK,WAAW,GAAG;AACnB,WAAO;AAAA,EACX;AACA,QAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI;AACjC,QAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,KAAK,CAAC;AAIvC,WAAS;AAAA,IACL,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK,KAAK;AAAA,IACpB,KAAK,KAAK,KAAK,KAAK;AAAA,EACxB;AACA,SAAO,iBAAiB,QAAQ,GAAG,KAAK,MAAM,CAAC,CAAC;AACpD;;;AChTA,IAAI,QAAQ;AAEZ,IAAM,gBAAgB;AACtB,IAAM,2BAA2B;AACjC,IAAM,cAAc,oBAAI,QAAQ;AAChC,IAAM,cAAc,oBAAI,QAAQ;AAChC,IAAM,WAAW,oBAAI,IAAI;AACzB,IAAM,6BAA6B,OAAO,YAAY,MAAM,QAAQ,OAAO,SAAS,kBAAkB,KAAK,iBAAiB,OAAO,cAAc;AACjJ,IAAM,iBAAN,cAA6B,YAAY;AAAA,EACrC,IAAI,eAAe;AACf,WAAO,GAAG,KAAK,aAAa,wBAAwB,KAAK,UAAU,OAAO,EAAE,GAAG,KAAK;AAAA,EACxF;AAAA,EACA,cAAc;AACV,QAAI,IAAI;AACR,UAAM;AACN,SAAK,iBAAiB;AACtB,SAAK,YAAY;AACjB,UAAM,QAAQ,MAAM,KAAK,OAAO,eAAe,IAAI,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG;AACnJ,QAAI,MAAM;AACN,eAAS,IAAI,MAAM,KAAK,QAAQ,YAAY,CAAC;AAAA,IACjD;AAAA,EACJ;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,yBAAyB,MAAM,UAAU,UAAU;AAC/C,QAAI,OAAO,GAAG,UAAU,QAAQ,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,eAAe,YAAY,IAAI;AACrC,UAAM,mBAAmB,KAAK,YAAY;AAC1C,QAAI,mBAAmB;AACvB,YAAQ,OAAO,kBAAkB;AAAA,MAC7B,KAAK;AACD,2BAAmB,aAAa,QAAQ,aAAa;AACrD;AAAA,MACJ,KAAK;AACD,2BAAmB,OAAO,QAAQ;AAClC;AAAA,IACR;AACA,SAAK,YAAY,IAAI;AACrB,YAAQ,MAAM;AAAA,MACV,KAAK,eAAe;AAChB,cAAM,aAAa,YAAY,IAAI,IAAI;AACvC,cAAM,SAAS,KAAK;AACpB,YAAI,cAAc,QAAQ;AACtB,cAAI,4BAA4B;AAC5B,uBAAW,YAAY,MAAM;AAAA,UACjC,OACK;AACD,uBAAW,cAAc;AAAA,UAC7B;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,yBAAyB,MAAM,UAAU,UAAU;AAC/C,QAAI,OAAO,GAAG,UAAU,QAAQ,GAAG;AAC/B;AAAA,IACJ;AACA,WAAO,YAAY,IAAI;AACvB,YAAQ,OAAO,UAAU;AAAA,MACrB,KAAK;AACD,YAAI,aAAa,MAAM;AACnB,cAAI,CAAC,KAAK,aAAa,IAAI,GAAG;AAC1B,iBAAK,aAAa,MAAM,EAAE;AAAA,UAC9B;AAAA,QACJ,OACK;AACD,eAAK,gBAAgB,IAAI;AAAA,QAC7B;AACA;AAAA,MACJ,KAAK;AACD,YAAI,MAAM,QAAQ,GAAG;AACjB,qBAAW;AAAA,QACf,OACK;AACD,qBAAW,OAAO,QAAQ;AAAA,QAC9B;AAAA,MAIJ;AACI,YAAI,UAAU;AACV,cAAI,KAAK,aAAa,IAAI,MAAM,UAAU;AACtC,iBAAK,aAAa,MAAM,QAAQ;AAAA,UACpC;AAAA,QACJ,OACK;AACD,eAAK,gBAAgB,IAAI;AAAA,QAC7B;AAAA,IACR;AAAA,EACJ;AAAA,EACA,oBAAoB;AAEhB,WAAO,eAAe,IAAI,EAAE,YAAY,mBAAmB,QAAQ,CAAC,cAAc;AAC9E,YAAM,WAAW,YAAY,SAAS;AACtC,UAAI,QAAQ,KAAK,QAAQ;AACzB,UAAI,CAAC,YAAY,KAAK,GAAG;AACrB,aAAK,yBAAyB,UAAU,QAAW,KAAK;AAAA,MAC5D;AACA,aAAO,eAAe,MAAM,UAAU;AAAA,QAClC,YAAY;AAAA,QACZ,cAAc;AAAA,QACd,MAAM;AACF,iBAAO;AAAA,QACX;AAAA,QACA,IAAI,UAAU;AACV,gBAAM,WAAW;AACjB,kBAAQ;AACR,eAAK,yBAAyB,UAAU,UAAU,QAAQ;AAAA,QAC9D;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AACD,UAAM,SAAS,KAAK,aAAa;AAAA,MAC7B,MAAM,KAAK,kBAAkB;AAAA,IACjC,CAAC;AACD,QAAI,CAAC,KAAK,YAAY;AAClB,kBAAY,IAAI,MAAM,MAAM;AAAA,IAChC;AACA,gBAAY,IAAI,MAAM,KAAK,WAAW,KAAK,YAAY,CAAC;AACxD,QAAI,KAAK,QAAQ;AACb,WAAK,WAAW,KAAK,MAAM;AAAA,IAC/B;AACA,QAAI,KAAK,WAAW;AAChB,YAAM,WAAW,SAAS,cAAc,UAAU;AAClD,eAAS,YAAY,KAAK;AAC1B,aAAO,YAAY,SAAS,OAAO;AAAA,IACvC;AACA,QAAI,KAAK,WAAW;AAChB,YAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,aAAO,YAAY,IAAI;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,QAAI,YAAY,IAAI,IAAI,GAAG;AACvB,kBAAY,OAAO,IAAI;AAAA,IAC3B;AACA,QAAI,YAAY,IAAI,IAAI,GAAG;AACvB,kBAAY,OAAO,IAAI;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA,EAEA,cAAc,MAAM;AAChB,QAAI;AACJ,YAAQ,KAAK,SAAS,IAAI,IAAI,OAAO,QAAQ,OAAO,SAAS,KAAK;AAAA,EACtE;AAAA,EACA,WAAW,YAAY;AACnB,WAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,aAAa;AAC1C,UAAI,QAAQ,WAAW,QAAQ;AAC/B,UAAI,SAAS,KAAK,GAAG;AACjB,YAAI,UAAU,KAAK,cAAc,KAAK,QAAQ,GAAG;AAC7C,kBAAQ,GAAG,KAAK;AAAA,QACpB,OACK;AACD,kBAAQ,OAAO,KAAK;AAAA,QACxB;AAAA,MACJ;AACA,WAAK,MAAM,QAAQ,IAAI;AAAA,IAC3B,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB;AACb,WAAO,KAAK,cAAc,YAAY,IAAI,IAAI;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,QAAQ;AACf,QAAI;AACJ,UAAM,SAAS,KAAK,eAAe;AACnC,QAAI,4BAA4B;AAC5B,mBAAa,IAAI,cAAc;AAC/B,iBAAW,YAAY,MAAM;AAC7B,aAAO,qBAAqB,OAAO,mBAAmB,OAAO,UAAU;AAAA,IAC3E,OACK;AACD,mBAAa,SAAS,cAAc,OAAO;AAC3C,iBAAW,cAAc;AACzB,aAAO,YAAY,UAAU;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,MAAM,QAAQ,SAAS;AACzB,WAAO,KAAK,MAAM,MAAM,QAAQ,OAAO;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,UAAU;AAChB,WAAO,SAAS,MAAM,QAAQ;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,QAAQ,MAAM,SAAS;AAC1B,QAAI,SAAS,IAAI,GAAG;AAChB,gBAAU;AACV,aAAO;AAAA,IACX;AACA,QAAI,CAAC,MAAM;AACP,aAAO,KAAK,SAAS,KAAK;AAAA,IAC9B;AACA,WAAO,YAAY,IAAI;AACvB,QAAI,cAAc,OAAO,kBAAkB,CAAC,OAAO,eAAe,IAAI,IAAI,GAAG;AACzE,qBAAe,OAAO,MAAM,MAAM,OAAO;AAAA,IAC7C;AAAA,EACJ;AACJ;AACA,eAAe,WAAW;;;ACzO1B,IAAIA,SAAQ;AAEZ,IAAM,gBAAN,cAA4B,eAAe;AAAA,EACvC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,YAAY,oBAAI,IAAI;AACzB,SAAK,SAASA;AACd,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,MAAM,mBAAmB,OAAO;AAAA,MACnC;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,QAAQ;AAAA,IACjB;AACA,UAAM,qBAAqB;AAAA,EAC/B;AAAA,EACA,yBAAyB,MAAM,UAAU,UAAU;AAC/C,QAAI,OAAO,GAAG,UAAU,QAAQ,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,yBAAyB,MAAM,UAAU,QAAQ;AACvD,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,YAAI,UAAU;AACV,eAAK,QAAQ;AAAA,QACjB,OACK;AACD,eAAK,MAAM;AAAA,QACf;AACA;AAAA,IACR;AAAA,EACJ;AAAA,EACA,QAAQ;AACJ,QAAI,CAAC,KAAK,gBAAgB;AACtB,WAAK,iBAAiB,KAAK,mBAAmB,KAAK,IAAI;AACvD,SAAG,MAAM,oBAAoB,KAAK,cAAc;AAAA,IACpD;AACA,QAAI,CAAC,KAAK,gBAAgB;AACtB,WAAK,iBAAiB,KAAK,mBAAmB,KAAK,IAAI;AACvD,SAAG,KAAK,eAAe,oBAAoB,KAAK,cAAc;AAAA,IAClE;AACA,QAAI,CAAC,KAAK,cAAc;AACpB,WAAK,eAAe,KAAK,iBAAiB,KAAK,IAAI;AACnD,SAAG,KAAK,eAAe,kBAAkB,KAAK,YAAY;AAAA,IAC9D;AACA,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,WAAW,KAAK,aAAa,KAAK,IAAI;AAC3C,SAAG,MAAM,aAAa,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,UAAU;AACN,QAAI,KAAK,gBAAgB;AACrB,UAAI,MAAM,oBAAoB,KAAK,cAAc;AACjD,WAAK,iBAAiB;AAAA,IAC1B;AACA,QAAI,KAAK,gBAAgB;AACrB,UAAI,KAAK,eAAe,oBAAoB,KAAK,cAAc;AAC/D,WAAK,iBAAiB;AAAA,IAC1B;AACA,QAAI,KAAK,cAAc;AACnB,UAAI,KAAK,eAAe,kBAAkB,KAAK,YAAY;AAC3D,WAAK,eAAe;AAAA,IACxB;AACA,QAAI,KAAK,UAAU;AACf,UAAI,MAAM,aAAa,KAAK,UAAU;AAAA,QAClC,SAAS;AAAA,MACb,CAAC;AACD,WAAK,WAAW;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,mBAAmB,OAAO;AACtB,UAAM,EAAE,SAAS,QAAQ,KAAK,IAAI;AAClC,QAAI,KAAK;AAAA,KAEP,SAAS,iBAAiB,MAAM,gBAAgB,WAAY,SAAS;AAAA,KAEtE,SAAS,OAAO,KAAK,YAAY,KAAO,SAAS,MAAM,KAAK,WAAW,KAEjE,MAAM,UAAW;AACpB;AAAA,IACJ;AACA,UAAM,EAAE,UAAU,IAAI;AACtB,QAAI,SAAS;AACb,QAAI,MAAM,gBAAgB;AACtB,YAAM,KAAK,MAAM,cAAc,EAAE,QAAQ,CAAC,EAAE,YAAY,OAAO,MAAO,MAAM;AACxE,kBAAU,IAAI,YAAY;AAAA,UACtB,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,MAAM;AAAA,QACV,CAAC;AAAA,MACL,CAAC;AAAA,IACL,OACK;AACD,YAAM,EAAE,YAAY,GAAG,OAAO,MAAM,IAAI;AACxC,gBAAU,IAAI,WAAW;AAAA,QACrB,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,MACV,CAAC;AAAA,IACL;AACA,QAAI,UAAU,OAAO,GAAG;AACpB,eAAS;AAAA,IACb,WACS,UAAU,MAAM,MAAM,GAAG;AAC9B,eAAS,MAAM,OAAO,UAAU,MAAM,OAAO,aAAa,gBAAgB,KAAK;AAAA,IACnF;AACA,QAAI,KAAK,MAAM,oBAAoB;AAAA,MAC/B;AAAA,MACA,cAAc;AAAA,IAClB,CAAC,MAAM,OAAO;AACV;AAAA,IACJ;AAEA,UAAM,eAAe;AACrB,SAAK,UAAU;AACf,SAAK,MAAM,aAAa;AAAA,EAC5B;AAAA,EACA,mBAAmB,OAAO;AACtB,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,QAAI,KAAK,YAAY,YAAY,eAAe,UAAU,SAAS,GAAG;AAClE;AAAA,IACJ;AACA,QAAI,KAAK,MAAM,mBAAmB;AAAA,MAC9B,QAAQ;AAAA,MACR,cAAc;AAAA,IAClB,CAAC,MAAM,OAAO;AACV;AAAA,IACJ;AAEA,UAAM,eAAe;AACrB,QAAI,MAAM,gBAAgB;AACtB,YAAM,KAAK,MAAM,cAAc,EAAE,QAAQ,CAAC,EAAE,YAAY,OAAO,MAAO,MAAM;AACxE,cAAM,UAAU,UAAU,IAAI,UAAU;AACxC,YAAI,SAAS;AACT,iBAAO,OAAO,SAAS;AAAA,YACnB,MAAM;AAAA,YACN,MAAM;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACL,OACK;AACD,YAAM,EAAE,YAAY,GAAG,OAAO,MAAM,IAAI;AACxC,YAAM,UAAU,UAAU,IAAI,SAAS;AACvC,UAAI,SAAS;AACT,eAAO,OAAO,SAAS;AAAA,UACnB,MAAM;AAAA,UACN,MAAM;AAAA,QACV,CAAC;AAAA,MACL;AAAA,IACJ;AACA,UAAM,SAAS;AAAA,MACX,QAAQ;AAAA,MACR,cAAc;AAAA,IAClB;AACA,QAAI,YAAY,kBAAkB;AAC9B,YAAM,YAAY,IAAI,IAAI,SAAS;AACnC,UAAI,gBAAgB;AACpB,UAAI,eAAe;AACnB,UAAI,SAAS;AACb,UAAI,QAAQ;AACZ,UAAI,UAAU,MAAM;AACpB,UAAI,UAAU,MAAM;AACpB,gBAAU,QAAQ,CAAC,SAAS,cAAc;AACtC,kBAAU,OAAO,SAAS;AAC1B,kBAAU,QAAQ,CAAC,aAAa;AAC5B,cAAI,KAAK,SAAS,SAAS,QAAQ;AACnC,cAAI,KAAK,SAAS,SAAS,QAAQ;AACnC,cAAI,KAAK,SAAS,OAAO,QAAQ;AACjC,cAAI,KAAK,SAAS,OAAO,QAAQ;AACjC,cAAI,KAAK;AACT,cAAI,KAAK;AACT,cAAI,KAAK;AACT,cAAI,KAAK;AACT,cAAI,OAAO,GAAG;AACV,gBAAI,KAAK,GAAG;AACR,mBAAK,KAAK,KAAK;AAAA,YACnB,WACS,KAAK,GAAG;AACb,mBAAK,KAAK;AAAA,YACd;AAAA,UACJ,WACS,KAAK,GAAG;AACb,iBAAM,KAAK,KAAK,IAAK,KAAK,KAAK,KAAK,EAAE;AAAA,UAC1C,WACS,KAAK,GAAG;AACb,iBAAM,KAAK,KAAK,MAAO,KAAK,KAAK,KAAK,EAAE;AAAA,UAC5C;AACA,cAAI,OAAO,GAAG;AACV,gBAAI,KAAK,GAAG;AACR,mBAAK,KAAK,KAAK;AAAA,YACnB,WACS,KAAK,GAAG;AACb,mBAAK,KAAK;AAAA,YACd;AAAA,UACJ,WACS,KAAK,GAAG;AACb,iBAAM,KAAK,KAAK,IAAK,KAAK,KAAK,KAAK,EAAE;AAAA,UAC1C,WACS,KAAK,GAAG;AACb,iBAAM,KAAK,KAAK,MAAO,KAAK,KAAK,KAAK,EAAE;AAAA,UAC5C;AACA,cAAI,KAAK,KAAK,KAAK,GAAG;AAClB,kBAAM,aAAa,KAAK;AACxB,kBAAM,gBAAgB,KAAK,IAAI,UAAU;AACzC,gBAAI,gBAAgB,eAAe;AAC/B,8BAAgB;AAChB,uBAAS;AACT,yBAAW,QAAQ,SAAS,SAAS,UAAU;AAC/C,yBAAW,QAAQ,SAAS,SAAS,UAAU;AAAA,YACnD;AAAA,UACJ;AACA,eAAK,KAAK,IAAI,EAAE;AAChB,eAAK,KAAK,IAAI,EAAE;AAChB,eAAK,KAAK,IAAI,EAAE;AAChB,eAAK,KAAK,IAAI,EAAE;AAChB,cAAI,KAAK,KAAK,KAAK,GAAG;AAClB,iBAAK,KAAK,KAAM,KAAK,KAAO,KAAK,EAAG;AAAA,UACxC,WACS,KAAK,GAAG;AACb,iBAAK;AAAA,UACT,WACS,KAAK,GAAG;AACb,iBAAK;AAAA,UACT;AACA,cAAI,KAAK,KAAK,KAAK,GAAG;AAClB,iBAAK,KAAK,KAAM,KAAK,KAAO,KAAK,EAAG;AAAA,UACxC,WACS,KAAK,GAAG;AACb,iBAAK;AAAA,UACT,WACS,KAAK,GAAG;AACb,iBAAK;AAAA,UACT;AACA,cAAI,KAAK,KAAK,KAAK,GAAG;AAClB,kBAAM,aAAa,KAAK,MAAM;AAC9B,kBAAM,eAAe,KAAK,IAAI,SAAS;AACvC,gBAAI,eAAe,cAAc;AAC7B,6BAAe;AACf,sBAAQ;AACR,yBAAW,QAAQ,SAAS,SAAS,UAAU;AAC/C,yBAAW,QAAQ,SAAS,SAAS,UAAU;AAAA,YACnD;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AACD,YAAM,YAAY,gBAAgB;AAClC,YAAM,WAAW,eAAe;AAChC,UAAI,aAAa,UAAU;AACvB,eAAO,SAAS;AAChB,eAAO,QAAQ;AACf,eAAO,UAAU;AACjB,eAAO,UAAU;AAAA,MACrB,WACS,WAAW;AAChB,eAAO,SAAS;AAChB,eAAO,SAAS;AAChB,eAAO,UAAU;AACjB,eAAO,UAAU;AAAA,MACrB,WACS,UAAU;AACf,eAAO,SAAS;AAChB,eAAO,QAAQ;AACf,eAAO,UAAU;AACjB,eAAO,UAAU;AAAA,MACrB,OACK;AACD,eAAO,SAAS;AAAA,MACpB;AAAA,IACJ,OACK;AACD,YAAM,CAAC,OAAO,IAAI,MAAM,KAAK,UAAU,OAAO,CAAC;AAC/C,aAAO,OAAO,QAAQ,OAAO;AAAA,IACjC;AAEA,cAAU,QAAQ,CAAC,YAAY;AAC3B,cAAQ,SAAS,QAAQ;AACzB,cAAQ,SAAS,QAAQ;AAAA,IAC7B,CAAC;AACD,QAAI,OAAO,WAAW,aAAa;AAC/B,WAAK,MAAM,cAAc,QAAQ;AAAA,QAC7B,YAAY;AAAA,MAChB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,iBAAiB,OAAO;AACpB,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,QAAI,KAAK,YAAY,YAAY,aAAa;AAC1C;AAAA,IACJ;AACA,QAAI,KAAK,MAAM,kBAAkB;AAAA,MAC7B,QAAQ;AAAA,MACR,cAAc;AAAA,IAClB,CAAC,MAAM,OAAO;AACV;AAAA,IACJ;AACA,UAAM,eAAe;AACrB,QAAI,MAAM,gBAAgB;AACtB,YAAM,KAAK,MAAM,cAAc,EAAE,QAAQ,CAAC,EAAE,WAAY,MAAM;AAC1D,kBAAU,OAAO,UAAU;AAAA,MAC/B,CAAC;AAAA,IACL,OACK;AACD,YAAM,EAAE,YAAY,EAAE,IAAI;AAC1B,gBAAU,OAAO,SAAS;AAAA,IAC9B;AACA,QAAI,UAAU,SAAS,GAAG;AACtB,WAAK,MAAM,aAAa;AACxB,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,aAAa,OAAO;AAChB,QAAI,KAAK,UAAU;AACf;AAAA,IACJ;AACA,UAAM,eAAe;AAErB,QAAI,KAAK,WAAW;AAChB;AAAA,IACJ;AACA,SAAK,YAAY;AAEjB,eAAW,MAAM;AACb,WAAK,YAAY;AAAA,IACrB,GAAG,EAAE;AACL,UAAM,QAAQ,MAAM,SAAS,IAAI,KAAK;AACtC,UAAM,QAAQ,QAAQ,KAAK;AAC3B,SAAK,MAAM,cAAc;AAAA,MACrB,QAAQ;AAAA,MACR;AAAA,MACA,cAAc;AAAA,IAClB,GAAG;AAAA,MACC,YAAY;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,QAAQ;AACf,QAAI,SAAS,MAAM,GAAG;AAClB,WAAK,UAAU;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,UAAU,SAAS;AACf,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UAAI,CAAC,KAAK,aAAa;AACnB,eAAO,IAAI,MAAM,kDAAkD,CAAC;AACpE;AAAA,MACJ;AACA,YAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,UAAI,QAAQ,KAAK;AACjB,UAAI,SAAS,KAAK;AAClB,UAAI,QAAQ;AACZ,UAAI,cAAc,OAAO,MACjB,iBAAiB,QAAQ,KAAK,KAAK,iBAAiB,QAAQ,MAAM,IAAI;AAC1E,SAAC,EAAE,OAAO,OAAO,IAAI,iBAAiB;AAAA,UAClC,aAAa,QAAQ;AAAA,UACrB,OAAO,QAAQ;AAAA,UACf,QAAQ,QAAQ;AAAA,QACpB,CAAC;AACD,gBAAQ,QAAQ,KAAK;AAAA,MACzB;AACA,aAAO,QAAQ;AACf,aAAO,SAAS;AAChB,YAAM,eAAe,KAAK,cAAc,KAAK,cAAc,aAAa,CAAC;AACzE,UAAI,CAAC,cAAc;AACf,gBAAQ,MAAM;AACd;AAAA,MACJ;AACA,mBAAa,OAAO,EAAE,KAAK,CAAC,UAAU;AAClC,cAAM,UAAU,OAAO,WAAW,IAAI;AACtC,YAAI,SAAS;AACT,gBAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI,aAAa,cAAc;AACtD,cAAI,OAAO;AACX,cAAI,OAAO;AACX,cAAI,YAAY,MAAM;AACtB,cAAI,aAAa,MAAM;AACvB,cAAI,UAAU,GAAG;AACb,oBAAQ;AACR,oBAAQ;AACR,yBAAa;AACb,0BAAc;AAAA,UAClB;AACA,gBAAM,UAAU,YAAY;AAC5B,gBAAM,UAAU,aAAa;AAC7B,kBAAQ,YAAY;AACpB,kBAAQ,SAAS,GAAG,GAAG,OAAO,MAAM;AACpC,cAAI,cAAc,OAAO,KAAK,WAAW,QAAQ,UAAU,GAAG;AAC1D,oBAAQ,WAAW,KAAK,MAAM,SAAS,MAAM;AAAA,UACjD;AACA,kBAAQ,KAAK;AAGb,kBAAQ,UAAU,SAAS,OAAO;AAClC,kBAAQ,UAAU,GAAG,GAAG,GAAG,GAAG,MAAM,IAAI;AAExC,kBAAQ,UAAU,CAAC,SAAS,CAAC,OAAO;AACpC,kBAAQ,UAAU,OAAO,GAAG,GAAG,WAAW,UAAU;AACpD,kBAAQ,QAAQ;AAAA,QACpB;AACA,gBAAQ,MAAM;AAAA,MAClB,CAAC,EAAE,MAAM,MAAM;AAAA,IACnB,CAAC;AAAA,EACL;AACJ;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;;;AC3bzB,IAAIC,SAAQ;AAEZ,IAAM,cAAc,oBAAI,QAAQ;AAChC,IAAM,oBAAoB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AACA,IAAM,eAAN,cAA2B,eAAe;AAAA,EACtC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAChC,SAAK,UAAU;AACf,SAAK,kBAAkB;AACvB,SAAK,qBAAqB;AAC1B,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,SAASA;AACd,SAAK,SAAS,IAAI,MAAM;AACxB,SAAK,oBAAoB;AACzB,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,gBAAY,IAAI,MAAM,OAAO;AAAA,EACjC;AAAA,EACA,IAAI,UAAU;AACV,WAAO,YAAY,IAAI,IAAI;AAAA,EAC/B;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,MAAM,mBAAmB,OAAO,mBAAmB;AAAA,MACtD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,yBAAyB,MAAM,UAAU,UAAU;AAC/C,QAAI,OAAO,GAAG,UAAU,QAAQ,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,yBAAyB,MAAM,UAAU,QAAQ;AAEvD,QAAI,kBAAkB,SAAS,IAAI,GAAG;AAClC,WAAK,OAAO,aAAa,MAAM,QAAQ;AAAA,IAC3C;AAAA,EACJ;AAAA,EACA,yBAAyB,MAAM,UAAU,UAAU;AAC/C,QAAI,OAAO,GAAG,UAAU,QAAQ,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,yBAAyB,MAAM,UAAU,QAAQ;AACvD,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,aAAK,UAAU,MAAM;AACjB,eAAK,QAAQ,QAAQ;AAAA,QACzB,CAAC;AACD;AAAA,IACR;AAAA,EACJ;AAAA,EACA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,UAAU,KAAK,QAAQ,KAAK,cAAc,cAAc,CAAC;AAC/D,QAAI,SAAS;AACT,WAAK,UAAU;AACf,WAAK,WAAW;AAAA;AAAA,QAEZ,SAAS;AAAA,QACT,UAAU;AAAA,MACd,CAAC;AACD,WAAK,uBAAuB,CAAC,UAAU;AACnC,YAAI,IAAI;AACR,aAAK,sBAAsB,MAAM,KAAK,MAAM,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,kBAAkB,QAAQ,OAAO,SAAS,SAAS,GAAG;AAAA,MACtJ;AACA,WAAK,qBAAqB,MAAM;AAC5B,aAAK,qBAAqB;AAAA,MAC9B;AACA,WAAK,kBAAkB,KAAK,cAAc,KAAK,IAAI;AACnD,SAAG,SAAS,oBAAoB,KAAK,oBAAoB;AACzD,SAAG,SAAS,kBAAkB,KAAK,kBAAkB;AACrD,SAAG,SAAS,cAAc,KAAK,eAAe;AAAA,IAClD;AACA,SAAK,UAAU,KAAK,YAAY,KAAK,IAAI;AACzC,OAAG,QAAQ,YAAY,KAAK,OAAO;AACnC,SAAK,eAAe,EAAE,YAAY,MAAM;AAAA,EAC5C;AAAA,EACA,uBAAuB;AACnB,UAAM,EAAE,QAAQ,QAAQ,IAAI;AAC5B,QAAI,SAAS;AACT,UAAI,KAAK,sBAAsB;AAC3B,YAAI,SAAS,oBAAoB,KAAK,oBAAoB;AAC1D,aAAK,uBAAuB;AAAA,MAChC;AACA,UAAI,KAAK,oBAAoB;AACzB,YAAI,SAAS,kBAAkB,KAAK,kBAAkB;AACtD,aAAK,qBAAqB;AAAA,MAC9B;AACA,UAAI,KAAK,iBAAiB;AACtB,YAAI,SAAS,cAAc,KAAK,eAAe;AAC/C,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AACA,QAAI,UAAU,KAAK,SAAS;AACxB,UAAI,QAAQ,YAAY,KAAK,OAAO;AACpC,WAAK,UAAU;AAAA,IACnB;AACA,SAAK,eAAe,EAAE,YAAY,MAAM;AACxC,UAAM,qBAAqB;AAAA,EAC/B;AAAA,EACA,cAAc;AACV,UAAM,EAAE,OAAO,IAAI;AACnB,SAAK,WAAW;AAAA,MACZ,OAAO,OAAO;AAAA,MACd,QAAQ,OAAO;AAAA,IACnB,CAAC;AACD,QAAI,KAAK,SAAS;AACd,WAAK,QAAQ,KAAK,iBAAiB;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,cAAc,OAAO;AACjB,QAAI,KAAK,UAAU,EAAE,KAAK,aAAa,KAAK,YAAY,KAAK,eAAe;AACxE;AAAA,IACJ;AACA,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,QAAQ;AACR,YAAM,EAAE,aAAa,IAAI;AACzB,UAAI,EAAE,OAAO,IAAI;AACjB,UAAI,WAAW,qBAAqB,CAAC,KAAK,aAAa,CAAC,KAAK,WAAW;AACpE,YAAI,KAAK,WAAW;AAChB,mBAAS;AAAA,QACb,WACS,KAAK,UAAU;AACpB,mBAAS;AAAA,QACb,OACK;AACD,mBAAS;AAAA,QACb;AAAA,MACJ;AACA,cAAQ,QAAQ;AAAA,QACZ,KAAK;AACD,cAAI,KAAK,cAAc;AACnB,gBAAI,aAAa;AACjB,gBAAI,cAAc;AACd,2BAAa,aAAa,OAAO,QAAQ,KAAK,cAAc,iBAAiB,CAAC;AAAA,YAClF;AACA,gBAAI,CAAC,YAAY;AACb,2BAAa,QAAQ,cAAc,KAAK,cAAc,iBAAiB,CAAC;AAAA,YAC5E;AACA,gBAAI,cAAc,WAAW,YAAY,CAAC,WAAW,QAAQ;AACzD,2BAAa,QAAQ,cAAc,GAAG,KAAK,cAAc,iBAAiB,CAAC,UAAU;AAAA,YACzF;AACA,gBAAI,CAAC,cAAc,WAAW,UAAU,CAAC,WAAW,WAAW,WAAW,WACnE,EAAE,KAAK,sBAAsB,WAAW,SAAS,KAAK,kBAAkB,IAAI;AAC/E,mBAAK,MAAM,OAAO,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO,MAAM;AAAA,YACvE;AAAA,UACJ;AACA;AAAA,QACJ,KAAK;AACD,cAAI,KAAK,WAAW;AAChB,gBAAI,cAAc;AACd,oBAAM,EAAE,GAAG,EAAE,IAAI,KAAK,sBAAsB;AAC5C,mBAAK,QAAQ,OAAO,QAAQ,aAAa,UAAU,GAAG,aAAa,UAAU,CAAC;AAAA,YAClF,OACK;AACD,mBAAK,QAAQ,OAAO,MAAM;AAAA,YAC9B;AAAA,UACJ;AACA;AAAA,QACJ,KAAK;AACD,cAAI,KAAK,UAAU;AACf,gBAAI,cAAc;AACd,oBAAM,aAAa,aAAa,OAAO,QAAQ,KAAK,cAAc,iBAAiB,CAAC;AACpF,kBAAI,CAAC,cACE,CAAC,WAAW,YACX,WAAW,YAAY,WAAW,SAAU;AAChD,sBAAM,EAAE,GAAG,EAAE,IAAI,KAAK,sBAAsB;AAC5C,qBAAK,MAAM,OAAO,OAAO,aAAa,UAAU,GAAG,aAAa,UAAU,CAAC;AAAA,cAC/E;AAAA,YACJ,OACK;AACD,mBAAK,MAAM,OAAO,KAAK;AAAA,YAC3B;AAAA,UACJ;AACA;AAAA,QACJ,KAAK;AACD,cAAI,KAAK,aAAa,KAAK,UAAU;AACjC,kBAAM,EAAE,OAAO,IAAI;AACnB,gBAAI,EAAE,MAAM,IAAI;AAChB,gBAAI,QAAQ,GAAG;AACX,sBAAQ,KAAK,IAAI;AAAA,YACrB,OACK;AACD,uBAAS;AAAA,YACb;AACA,kBAAM,MAAM,KAAK,IAAI,MAAM;AAC3B,kBAAM,MAAM,KAAK,IAAI,MAAM;AAC3B,kBAAM,CAAC,QAAQ,OAAO,OAAO,MAAM,IAAI;AAAA,cACnC,MAAM;AAAA,cACN,MAAM;AAAA,cACN,CAAC,MAAM;AAAA,cACP,MAAM;AAAA,YACV;AACA,gBAAI,cAAc;AACd,oBAAM,aAAa,KAAK,sBAAsB;AAC9C,oBAAM,IAAI,aAAa,UAAU,WAAW;AAC5C,oBAAM,IAAI,aAAa,UAAU,WAAW;AAC5C,oBAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,KAAK;AAC1B,oBAAM,UAAU,WAAW,QAAQ;AACnC,oBAAM,UAAU,WAAW,SAAS;AACpC,oBAAM,QAAQ,IAAI;AAClB,oBAAM,QAAQ,IAAI;AAClB,oBAAM,cAAe,QAAQ,IAAM,IAAI,UAAY,IAAI,IAAM,IAAI;AACjE,oBAAM,cAAe,QAAQ,IAAM,IAAI,UAAY,IAAI,IAAM,IAAI;AAMjE,mBAAK,WAAW,QAAQ,OAAO,OAAO,QAAQ,cAAc,IAAI,UAAU,aAAa,OAAO,cAAc,IAAI,UAAU,aAAa,KAAK;AAAA,YAChJ,OACK;AAMD,mBAAK,WAAW,QAAQ,OAAO,OAAO,QAAQ,GAAG,CAAC;AAAA,YACtD;AAAA,UACJ;AACA;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,UAAU;AACb,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7C,YAAM,QAAQ,IAAI,MAAM,iCAAiC;AACzD,UAAI,OAAO,UAAU;AACjB,YAAI,OAAO,eAAe,KAAK,OAAO,gBAAgB,GAAG;AACrD,kBAAQ,MAAM;AAAA,QAClB,OACK;AACD,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ,OACK;AACD,cAAM,SAAS,MAAM;AAEjB,cAAI,QAAQ,aAAa,OAAO;AAChC,kBAAQ,MAAM;AAAA,QAClB;AACA,cAAM,UAAU,MAAM;AAClB,cAAI,QAAQ,YAAY,MAAM;AAC9B,iBAAO,KAAK;AAAA,QAChB;AACA,aAAK,QAAQ,YAAY,MAAM;AAC/B,aAAK,QAAQ,aAAa,OAAO;AAAA,MACrC;AAAA,IACJ,CAAC;AACD,QAAI,WAAW,QAAQ,GAAG;AACtB,cAAQ,KAAK,CAAC,UAAU;AACpB,iBAAS,KAAK;AACd,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,MAAM;AACV,UAAM,EAAE,cAAc,IAAI;AAC1B,QAAI,CAAC,eAAe;AAChB,aAAO;AAAA,IACX;AACA,UAAM,YAAY,cAAc,sBAAsB;AACtD,UAAM,iBAAiB,UAAU;AACjC,UAAM,kBAAkB,UAAU;AAClC,UAAM,EAAE,GAAG,GAAG,OAAO,OAAQ,IAAI,KAAK,sBAAsB;AAC5D,UAAM,SAAS,IAAK,QAAQ;AAC5B,UAAM,SAAS,IAAK,SAAS;AAC7B,UAAM,OAAO,UAAU,IAAK,iBAAiB;AAC7C,UAAM,OAAO,UAAU,IAAK,kBAAkB;AAC9C,SAAK,MAAM,OAAO,QAAQ,OAAO,MAAM;AACvC,QAAI,SAAS,UAAU,kBAAkB,WAAW,kBAAkB;AAClE,YAAM,SAAS,iBAAiB;AAChC,YAAM,SAAS,kBAAkB;AACjC,cAAQ,MAAM;AAAA,QACV,KAAK;AACD,eAAK,OAAO,KAAK,IAAI,QAAQ,MAAM,CAAC;AACpC;AAAA,QACJ,KAAK;AACD,eAAK,OAAO,KAAK,IAAI,QAAQ,MAAM,CAAC;AACpC;AAAA,MACR;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,GAAG,IAAI,GAAG;AACZ,QAAI,KAAK,gBAAgB,SAAS,CAAC,KAAK,SAAS,CAAC,GAAG;AACjD,YAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,KAAK;AAC1B,YAAM,KAAM,IAAI,IAAM,IAAI,MAAQ,IAAI,IAAM,IAAI;AAChD,YAAM,KAAM,IAAI,IAAM,IAAI,MAAQ,IAAI,IAAM,IAAI;AAChD,WAAK,WAAW,GAAG,CAAC;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,GAAG,IAAI,GAAG;AACd,QAAI,KAAK,gBAAgB,SAAS,CAAC,KAAK,SAAS,CAAC,GAAG;AACjD,YAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,KAAK;AAC1B,YAAM,KAAM,IAAI,IAAM,IAAI,MAAQ,IAAI,IAAM,IAAI;AAChD,YAAM,KAAM,IAAI,IAAM,IAAI,MAAQ,IAAI,IAAM,IAAI;AAChD,WAAK,cAAc,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,IACvC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,QAAQ,OAAO,GAAG,GAAG;AACjB,QAAI,KAAK,WAAW;AAChB,YAAM,SAAS,gBAAgB,KAAK;AACpC,YAAM,MAAM,KAAK,IAAI,MAAM;AAC3B,YAAM,MAAM,KAAK,IAAI,MAAM;AAC3B,YAAM,CAAC,QAAQ,OAAO,OAAO,MAAM,IAAI,CAAC,KAAK,KAAK,CAAC,KAAK,GAAG;AAC3D,UAAI,SAAS,CAAC,KAAK,SAAS,CAAC,GAAG;AAC5B,cAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,KAAK;AAC1B,cAAM,EAAE,OAAO,OAAO,IAAI,KAAK,sBAAsB;AACrD,cAAM,UAAU,QAAQ;AACxB,cAAM,UAAU,SAAS;AACzB,cAAM,QAAQ,IAAI;AAClB,cAAM,QAAQ,IAAI;AAClB,cAAM,cAAe,QAAQ,IAAM,IAAI,UAAY,IAAI,IAAM,IAAI;AACjE,cAAM,cAAe,QAAQ,IAAM,IAAI,UAAY,IAAI,IAAM,IAAI;AAOjE,aAAK,WAAW,QAAQ,OAAO,OAAO,QAAQ,cAAc,IAAI,UAAU,aAAa,OAAO,cAAc,IAAI,UAAU,aAAa,KAAK;AAAA,MAChJ,OACK;AACD,aAAK,WAAW,QAAQ,OAAO,OAAO,QAAQ,GAAG,CAAC;AAAA,MACtD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,OAAO,GAAG,GAAG;AACf,QAAI,CAAC,KAAK,YAAY,UAAU,GAAG;AAC/B,aAAO;AAAA,IACX;AACA,QAAI,QAAQ,GAAG;AACX,cAAQ,KAAK,IAAI;AAAA,IACrB,OACK;AACD,eAAS;AAAA,IACb;AACA,QAAI,SAAS,CAAC,KAAK,SAAS,CAAC,GAAG;AAC5B,YAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,KAAK;AAC1B,YAAM,EAAE,OAAO,OAAO,IAAI,KAAK,sBAAsB;AACrD,YAAM,UAAU,QAAQ;AACxB,YAAM,UAAU,SAAS;AACzB,YAAM,QAAQ,IAAI;AAClB,YAAM,QAAQ,IAAI;AAClB,YAAM,cAAe,QAAQ,IAAM,IAAI,UAAY,IAAI,IAAM,IAAI;AACjE,YAAM,cAAe,QAAQ,IAAM,IAAI,UAAY,IAAI,IAAM,IAAI;AAOjE,WAAK,WAAW,OAAO,GAAG,GAAG,OAAO,cAAc,IAAI,QAAQ,cAAc,IAAI,MAAM;AAAA,IAC1F,OACK;AACD,WAAK,OAAO,KAAK;AAAA,IACrB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,GAAG,IAAI,GAAG;AACb,QAAI,KAAK,UAAU;AACf,WAAK,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,GAAG,IAAI,GAAG;AACZ,QAAI,KAAK,UAAU;AACf,YAAM,UAAU,gBAAgB,CAAC;AACjC,YAAM,UAAU,gBAAgB,CAAC;AACjC,WAAK,WAAW,GAAG,KAAK,IAAI,OAAO,GAAG,KAAK,IAAI,OAAO,GAAG,GAAG,GAAG,CAAC;AAAA,IACpE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,GAAG,IAAI,GAAG;AACjB,QAAI,KAAK,gBAAgB,SAAS,CAAC,KAAK,SAAS,CAAC,GAAG;AACjD,WAAK,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AACzB,QAAI,SAAS,CAAC,KACP,SAAS,CAAC,KACV,SAAS,CAAC,KACV,SAAS,CAAC,KACV,SAAS,CAAC,KACV,SAAS,CAAC,GAAG;AAChB,aAAO,KAAK,cAAc,iBAAiB,KAAK,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAAA,IAChF;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,cAAc,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC5B,QAAI,KAAK,aAAa,KAAK,YAAY,KAAK,YAAY,KAAK,cAAc;AACvE,UAAI,MAAM,QAAQ,CAAC,GAAG;AAClB,SAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI;AAAA,MACzB;AACA,UAAI,SAAS,CAAC,KACP,SAAS,CAAC,KACV,SAAS,CAAC,KACV,SAAS,CAAC,KACV,SAAS,CAAC,KACV,SAAS,CAAC,GAAG;AAChB,cAAM,YAAY,CAAC,GAAG,KAAK,OAAO;AAClC,cAAM,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACnC,YAAI,KAAK,MAAM,iBAAiB;AAAA,UAC5B,QAAQ;AAAA,UACR;AAAA,QACJ,CAAC,MAAM,OAAO;AACV,iBAAO;AAAA,QACX;AACA,aAAK,UAAU;AACf,aAAK,MAAM,YAAY,UAAU,UAAU,KAAK,IAAI,CAAC;AAAA,MACzD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB;AACZ,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB;AACd,WAAO,KAAK,cAAc,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,EAChD;AACJ;AACA,aAAa,QAAQ;AACrB,aAAa,WAAW;;;ACjiBxB,IAAIC,SAAQ;AAEZ,IAAMC,eAAc,oBAAI,QAAQ;AAChC,IAAM,eAAN,cAA2B,eAAe;AAAA,EACtC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,kBAAkB;AACvB,SAAK,qBAAqB;AAC1B,SAAK,uBAAuB;AAC5B,SAAK,SAASD;AACd,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,IAAAC,aAAY,IAAI,MAAM,OAAO;AAAA,EACjC;AAAA,EACA,IAAI,UAAU;AACV,WAAOA,aAAY,IAAI,IAAI;AAAA,EAC/B;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,MAAM,mBAAmB,OAAO;AAAA,MACnC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,UAAM,UAAU,KAAK,QAAQ,KAAK,cAAc,cAAc,CAAC;AAC/D,QAAI,SAAS;AACT,WAAK,UAAU;AACf,WAAK,MAAM,WAAW;AACtB,YAAM,aAAa,QAAQ,cAAc,KAAK,cAAc,iBAAiB,CAAC;AAC9E,UAAI,YAAY;AACZ,aAAK,uBAAuB,CAAC,UAAU;AACnC,cAAI,WAAW,UAAU,MAAM,OAAO,WAAW,eAAe;AAC5D,iBAAK,SAAS;AAAA,UAClB;AAAA,QACJ;AACA,aAAK,qBAAqB,CAAC,UAAU;AACjC,cAAI,WAAW,UAAU,MAAM,OAAO,WAAW,eAAe;AAC5D,iBAAK,SAAS;AAAA,UAClB;AAAA,QACJ;AACA,aAAK,kBAAkB,CAAC,UAAU;AAC9B,gBAAM,EAAE,GAAG,GAAG,OAAO,OAAQ,IAAI,MAAM;AACvC,eAAK,QAAQ,GAAG,GAAG,OAAO,MAAM;AAChC,cAAI,WAAW,UAAW,MAAM,KAAK,MAAM,KAAK,UAAU,KAAK,WAAW,GAAI;AAC1E,iBAAK,SAAS;AAAA,UAClB;AAAA,QACJ;AACA,WAAG,SAAS,oBAAoB,KAAK,oBAAoB;AACzD,WAAG,SAAS,kBAAkB,KAAK,kBAAkB;AACrD,WAAG,SAAS,cAAc,KAAK,eAAe;AAAA,MAClD;AAAA,IACJ;AACA,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,uBAAuB;AACnB,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,SAAS;AACT,UAAI,KAAK,sBAAsB;AAC3B,YAAI,SAAS,oBAAoB,KAAK,oBAAoB;AAC1D,aAAK,uBAAuB;AAAA,MAChC;AACA,UAAI,KAAK,oBAAoB;AACzB,YAAI,SAAS,kBAAkB,KAAK,kBAAkB;AACtD,aAAK,qBAAqB;AAAA,MAC9B;AACA,UAAI,KAAK,iBAAiB;AACtB,YAAI,SAAS,cAAc,KAAK,eAAe;AAC/C,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AACA,UAAM,qBAAqB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,GAAG,GAAG,QAAQ,KAAK,OAAO,SAAS,KAAK,QAAQ;AACpD,QAAI,CAAC,SAAS,CAAC,KACR,CAAC,SAAS,CAAC,KACX,CAAC,SAAS,KAAK,KACf,CAAC,SAAS,MAAM,KACf,MAAM,KAAK,KAAK,MAAM,KAAK,KAAK,UAAU,KAAK,SAAS,WAAW,KAAK,QAAS;AACrF,aAAO;AAAA,IACX;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,SAAS;AAAA,IAClB;AACA,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACL,WAAO,KAAK,QAAQ,GAAG,GAAG,GAAG,CAAC;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACN,WAAO,KAAK,WAAW;AAAA,MACnB,WAAW,aAAa,KAAK,CAAC,OAAO,KAAK,CAAC;AAAA,MAC3C,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,MACb,cAAc,OAAO;AAAA,IACzB,CAAC;AAAA,EACL;AACJ;AACA,aAAa,QAAQ;AACrB,aAAa,WAAW;;;AC/HxB,IAAIC,SAAQ;AAEZ,IAAM,gBAAN,cAA4B,eAAe;AAAA,EACvC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,mBAAmB;AACxB,SAAK,qBAAqB;AAC1B,SAAK,SAASA;AACd,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,YAAY;AACjB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,MAAM,mBAAmB,OAAO;AAAA,MACnC;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;;;ACrBzB,IAAIC,SAAQ;AAEZ,IAAMC,eAAc,oBAAI,QAAQ;AAChC,IAAM,mBAAN,cAA+B,eAAe;AAAA,EAC1C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,kBAAkB;AACvB,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,UAAU;AACf,SAAK,qBAAqB;AAC1B,SAAK,YAAY;AACjB,SAAK,SAASD;AACd,SAAK,oBAAoB;AAAA,MACrB,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AACA,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,cAAc;AACnB,SAAK,qBAAqB;AAC1B,SAAK,kBAAkB;AACvB,SAAK,SAAS;AAEd,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,IAAAC,aAAY,IAAI,MAAM,OAAO;AAAA,EACjC;AAAA,EACA,IAAI,UAAU;AACV,WAAOA,aAAY,IAAI,IAAI;AAAA,EAC/B;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,MAAM,mBAAmB,OAAO;AAAA,MACnC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,yBAAyB,MAAM,UAAU,UAAU;AAC/C,QAAI,OAAO,GAAG,UAAU,QAAQ,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,yBAAyB,MAAM,UAAU,QAAQ;AACvD,YAAQ,MAAM;AAAA,MACV,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,YAAI,CAAC,KAAK,WAAW;AACjB,eAAK,UAAU,MAAM;AACjB,iBAAK,QAAQ,KAAK,GAAG,KAAK,GAAG,KAAK,OAAO,KAAK,QAAQ,KAAK,aAAa,IAAI;AAAA,UAChF,CAAC;AAAA,QACL;AACA;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,aAAK,UAAU,MAAM;AACjB,eAAK,eAAe;AAAA,QACxB,CAAC;AACD;AAAA,MACJ,KAAK;AACD,aAAK,UAAU,MAAM;AACjB,cAAI,iBAAiB,QAAQ,KAAK,YAAY,GAAG;AAC7C,iBAAK,eAAe,MAAM,IAAI;AAAA,UAClC;AAAA,QACJ,CAAC;AACD;AAAA,MACJ,KAAK;AACD,aAAK,UAAU,MAAM;AACjB,cAAI,KAAK,SAAS;AACd,gBAAI,UAAU;AACV,kBAAI,CAAC,KAAK,oBAAoB;AAC1B,qBAAK,qBAAqB,KAAK,eAAe,KAAK,IAAI;AACvD,mBAAG,KAAK,eAAe,eAAe,KAAK,kBAAkB;AAAA,cACjE;AAAA,YACJ,WACS,KAAK,oBAAoB;AAC9B,kBAAI,KAAK,eAAe,eAAe,KAAK,kBAAkB;AAC9D,mBAAK,qBAAqB;AAAA,YAC9B;AAAA,UACJ;AAAA,QACJ,CAAC;AACD;AAAA,MACJ,KAAK;AACD,aAAK,UAAU,MAAM;AACjB,cAAI,KAAK,SAAS;AACd,kBAAM,aAAa,KAAK,eAAe;AACvC,gBAAI,UAAU;AACV,yBAAW,QAAQ,CAAC,cAAc;AAC9B,0BAAU,SAAS;AAAA,cACvB,CAAC;AACD,mBAAK,SAAS;AACd,mBAAK,MAAM,cAAc;AAAA,gBACrB,GAAG,KAAK;AAAA,gBACR,GAAG,KAAK;AAAA,gBACR,OAAO,KAAK;AAAA,gBACZ,QAAQ,KAAK;AAAA,cACjB,CAAC;AAAA,YACL,OACK;AACD,mBAAK,SAAS;AACd,yBAAW,MAAM,CAAC,EAAE,QAAQ,CAAC,cAAc;AACvC,qBAAK,iBAAiB,SAAS;AAAA,cACnC,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,QACJ,CAAC;AACD;AAAA,MACJ,KAAK;AACD,aAAK,UAAU,MAAM;AACjB,eAAK,QAAQ,KAAK,GAAG,KAAK,CAAC;AAAA,QAC/B,CAAC;AACD;AAAA,MAEJ,KAAK;AACD,YAAI,UAAU;AACV,eAAK,UAAU;AAAA,QACnB;AACA;AAAA,IACR;AAAA,EACJ;AAAA,EACA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,UAAM,UAAU,KAAK,QAAQ,KAAK,cAAc,cAAc,CAAC;AAC/D,QAAI,SAAS;AACT,WAAK,UAAU;AACf,WAAK,WAAW;AAAA,QACZ,UAAU;AAAA,QACV,WAAW,aAAa,KAAK,CAAC,OAAO,KAAK,CAAC;AAAA,MAC/C,CAAC;AACD,UAAI,CAAC,KAAK,QAAQ;AACd,aAAK,QAAQ;AAAA,MACjB;AACA,WAAK,eAAe,IAAI;AACxB,WAAK,uBAAuB,KAAK,mBAAmB,KAAK,IAAI;AAC7D,WAAK,qBAAqB,KAAK,iBAAiB,KAAK,IAAI;AACzD,WAAK,kBAAkB,KAAK,cAAc,KAAK,IAAI;AACnD,SAAG,SAAS,oBAAoB,KAAK,oBAAoB;AACzD,SAAG,SAAS,kBAAkB,KAAK,kBAAkB;AACrD,SAAG,SAAS,cAAc,KAAK,eAAe;AAAA,IAClD,OACK;AACD,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,SAAS;AACT,UAAI,KAAK,sBAAsB;AAC3B,YAAI,SAAS,oBAAoB,KAAK,oBAAoB;AAC1D,aAAK,uBAAuB;AAAA,MAChC;AACA,UAAI,KAAK,oBAAoB;AACzB,YAAI,SAAS,kBAAkB,KAAK,kBAAkB;AACtD,aAAK,qBAAqB;AAAA,MAC9B;AACA,UAAI,KAAK,iBAAiB;AACtB,YAAI,SAAS,cAAc,KAAK,eAAe;AAC/C,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AACA,UAAM,qBAAqB;AAAA,EAC/B;AAAA,EACA,iBAAiB;AACb,QAAI,aAAa,CAAC;AAClB,QAAI,KAAK,eAAe;AACpB,mBAAa,MAAM,KAAK,KAAK,cAAc,iBAAiB,KAAK,cAAc,iBAAiB,CAAC,CAAC;AAAA,IACtG;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe,SAAS,OAAO,SAAS,OAAO;AAC3C,UAAM,EAAE,iBAAiB,cAAc,IAAI;AAC3C,QAAI,iBAAiB,eAAe,KAAK,eAAe;AACpD,YAAM,cAAc,KAAK,eAAe,KAAK;AAC7C,UAAI,SAAS,SAAS,IAAI,KAAK,UAAU,cAAc,cAAc;AACrE,UAAI,UAAU,SAAS,IAAI,KAAK,WAAW,cAAc,eAAe;AACxE,UAAI,iBAAiB,WAAW,GAAG;AAC/B,SAAC,EAAE,OAAO,OAAO,IAAI,iBAAiB,EAAE,aAAa,OAAO,OAAO,CAAC;AAAA,MACxE;AACA,WAAK,QAAQ,KAAK,GAAG,KAAK,GAAG,OAAO,MAAM;AAC1C,UAAI,QAAQ;AACR,aAAK,QAAQ;AAAA,MACjB;AAEA,WAAK,oBAAoB;AAAA,QACrB,GAAG,KAAK;AAAA,QACR,GAAG,KAAK;AAAA,QACR,OAAO,KAAK;AAAA,QACZ,QAAQ,KAAK;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,UAAM,eAAe,KAAK,UAAU,IAAI;AACxC,QAAI,KAAK,aAAa,IAAI,GAAG;AACzB,mBAAa,gBAAgB,IAAI;AAAA,IACrC;AACA,iBAAa,kBAAkB;AAC/B,SAAK,SAAS;AACd,QAAI,KAAK,eAAe;AACpB,WAAK,cAAc,aAAa,cAAc,KAAK,WAAW;AAAA,IAClE;AACA,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,YAAY,MAAM;AAC/B,QAAI,KAAK,eAAe;AACpB,YAAM,aAAa,KAAK,eAAe;AACvC,UAAI,WAAW,SAAS,GAAG;AACvB,cAAM,QAAQ,WAAW,QAAQ,SAAS;AAC1C,cAAM,kBAAkB,WAAW,QAAQ,CAAC,KAAK,WAAW,QAAQ,CAAC;AACrE,YAAI,iBAAiB;AACjB,oBAAU,SAAS;AACnB,eAAK,cAAc,YAAY,SAAS;AACxC,0BAAgB,SAAS;AACzB,0BAAgB,MAAM,cAAc;AAAA,YAChC,GAAG,gBAAgB;AAAA,YACnB,GAAG,gBAAgB;AAAA,YACnB,OAAO,gBAAgB;AAAA,YACvB,QAAQ,gBAAgB;AAAA,UAC5B,CAAC;AAAA,QACL;AAAA,MACJ,OACK;AACD,aAAK,OAAO;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,mBAAmB,OAAO;AACtB,QAAI,IAAI;AACR,UAAM,iBAAiB,MAAM,KAAK,MAAM,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,kBAAkB,QAAQ,OAAO,SAAS,SAAS,GAAG;AAC9I,SAAK,UAAU;AACf,SAAK,qBAAqB;AAC1B,QAAI,CAAC,KAAK,UACH,KAAK,YACL,CAAC,KAAK,UACN,kBAAkB,QAClB,KAAK,eAAe;AACvB,WAAK,eAAe,EAAE,QAAQ,CAAC,cAAc;AACzC,kBAAU,SAAS;AAAA,MACvB,CAAC;AACD,WAAK,SAAS;AACd,WAAK,MAAM,cAAc;AAAA,QACrB,GAAG,KAAK;AAAA,QACR,GAAG,KAAK;AAAA,QACR,OAAO,KAAK;AAAA,QACZ,QAAQ,KAAK;AAAA,MACjB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,cAAc,OAAO;AACjB,UAAM,EAAE,eAAe,OAAO,IAAI;AAClC,QAAI,CAAC,iBAAiB,CAAC,QAAQ;AAC3B;AAAA,IACJ;AACA,UAAM,EAAE,aAAa,IAAI;AACzB,QAAI,EAAE,OAAO,IAAI;AAEjB,QAAI,CAAC,UAAU,KAAK,UAAU;AAE1B,eAAS,KAAK,YAAY,iBAAiB,QAAQ,iBAAiB,SAAS,SAAS,aAAa,OAAO;AAC1G,WAAK,UAAU;AAAA,IACnB;AACA,QAAI,CAAC,UACG,KAAK,UAAU,WAAW,iBAC1B,KAAK,YAAY,CAAC,KAAK,UAAU,WAAW,cAAe;AAC/D;AAAA,IACJ;AACA,UAAM,QAAQ,OAAO,OAAO,OAAO;AACnC,UAAM,QAAQ,OAAO,OAAO,OAAO;AACnC,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,QAAI,EAAE,YAAY,IAAI;AAEtB,QAAI,CAAC,iBAAiB,WAAW,KAAK,aAAa,UAAU;AACzD,oBAAc,iBAAiB,KAAK,KAAK,iBAAiB,MAAM,IAAI,QAAQ,SAAS;AAAA,IACzF;AACA,YAAQ,QAAQ;AAAA,MACZ,KAAK;AACD,YAAI,UAAU,KAAK,UAAU,GAAG;AAC5B,gBAAM,EAAE,QAAQ,IAAI;AACpB,gBAAM,SAAS,UAAU,aAAa;AACtC,WAAC,KAAK,YAAY,CAAC,KAAK,SAAS,KAAK,iBAAiB,IAAI,MAAM,QAAQ,OAAO,SAAS,OAAO,MAAM,OAAO,SAAS,OAAO,KAAK,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,WAAW;AAC/K,cAAI,QAAQ,GAAG;AACX,gBAAI,QAAQ,GAAG;AAEX,uBAAS;AAAA,YACb,WACS,QAAQ,GAAG;AAEhB,uBAAS;AAAA,YACb;AAAA,UACJ,WACS,QAAQ,GAAG;AAChB,gBAAI,QAAQ,GAAG;AAEX,uBAAS;AAAA,YACb,WACS,QAAQ,GAAG;AAEhB,uBAAS;AAAA,YACb;AAAA,UACJ;AACA,cAAI,SAAS;AACT,oBAAQ,UAAU;AAAA,UACtB;AAAA,QACJ;AACA;AAAA,MACJ,KAAK;AACD,YAAI,KAAK,YAAY,KAAK,WAClB,KAAK,sBAAsB,KAAK,SAAS,KAAK,kBAAkB,IAAK;AACzE,eAAK,MAAM,OAAO,KAAK;AAAA,QAC3B;AACA;AAAA,MACJ,KAAK;AACD,YAAI,gBAAgB,KAAK,aAAa,KAAK,WACpC,KAAK,SAAS,aAAa,MAAM,IAAI;AACxC,gBAAM,SAAS,UAAU,aAAa;AACtC,eAAK,MAAM,OAAO,OAAO,aAAa,QAAQ,OAAO,MAAM,aAAa,QAAQ,OAAO,GAAG;AAAA,QAC9F;AACA;AAAA,MACJ;AACI,aAAK,QAAQ,QAAQ,OAAO,OAAO,WAAW;AAAA,IACtD;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,SAAK,UAAU;AACf,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,eAAe,OAAO;AAClB,QAAI,KAAK,UACF,CAAC,KAAK,YACL,KAAK,YAAY,CAAC,KAAK,UACxB,MAAM,kBAAkB;AAC3B;AAAA,IACJ;AACA,UAAM,EAAE,cAAc,IAAI;AAE1B,QAAI,kBAAkB,CAAC,SAAS,UAAU,EAAE,SAAS,cAAc,OAAO,KACnE,CAAC,QAAQ,gBAAgB,EAAE,SAAS,cAAc,eAAe,IAAI;AACxE;AAAA,IACJ;AACA,YAAQ,MAAM,KAAK;AAAA,MACf,KAAK;AACD,YAAI,MAAM,SAAS;AACf,gBAAM,eAAe;AACrB,eAAK,iBAAiB;AAAA,QAC1B;AACA;AAAA,MACJ,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,iBAAiB;AACtB;AAAA,MAEJ,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,MAAM,IAAI,CAAC;AAChB;AAAA,MAEJ,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,MAAM,GAAG,CAAC;AACf;AAAA,MAEJ,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,MAAM,GAAG,EAAE;AAChB;AAAA,MAEJ,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,MAAM,GAAG,CAAC;AACf;AAAA,MACJ,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,MAAM,GAAG;AACd;AAAA,MACJ,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,MAAM,IAAI;AACf;AAAA,IACR;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACN,UAAM,EAAE,cAAc,IAAI;AAC1B,QAAI,CAAC,eAAe;AAChB,aAAO;AAAA,IACX;AACA,UAAM,KAAK,cAAc,cAAc,KAAK,SAAS;AACrD,UAAM,KAAK,cAAc,eAAe,KAAK,UAAU;AACvD,WAAO,KAAK,QAAQ,GAAG,CAAC;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,GAAG,IAAI,GAAG;AACZ,WAAO,KAAK,QAAQ,KAAK,IAAI,GAAG,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,GAAG,IAAI,GAAG;AACd,QAAI,CAAC,KAAK,SAAS;AACf,aAAO;AAAA,IACX;AACA,WAAO,KAAK,QAAQ,GAAG,CAAC;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,QAAQ,UAAU,GAAG,UAAU,GAAG,cAAc,KAAK,aAAa;AACtE,QAAI,CAAC,KAAK,WAAW;AACjB,aAAO;AAAA,IACX;AACA,UAAM,sBAAsB,iBAAiB,WAAW;AACxD,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,EAAE,GAAG,GAAG,OAAO,OAAQ,IAAI;AAC/B,YAAQ,QAAQ;AAAA,MACZ,KAAK;AACD,aAAK;AACL,kBAAU;AACV,YAAI,SAAS,GAAG;AACZ,mBAAS;AACT,mBAAS,CAAC;AACV,eAAK;AAAA,QACT;AACA,YAAI,qBAAqB;AACrB,oBAAU,UAAU;AACpB,eAAK,UAAU;AACf,mBAAS;AACT,cAAI,QAAQ,GAAG;AACX,oBAAQ,CAAC;AACT,iBAAK;AAAA,UACT;AAAA,QACJ;AACA;AAAA,MACJ,KAAK;AACD,iBAAS;AACT,YAAI,QAAQ,GAAG;AACX,mBAAS;AACT,kBAAQ,CAAC;AACT,eAAK;AAAA,QACT;AACA,YAAI,qBAAqB;AACrB,oBAAU,UAAU;AACpB,eAAK,UAAU;AACf,oBAAU;AACV,cAAI,SAAS,GAAG;AACZ,qBAAS,CAAC;AACV,iBAAK;AAAA,UACT;AAAA,QACJ;AACA;AAAA,MACJ,KAAK;AACD,kBAAU;AACV,YAAI,SAAS,GAAG;AACZ,mBAAS;AACT,mBAAS,CAAC;AACV,eAAK;AAAA,QACT;AACA,YAAI,qBAAqB;AACrB,oBAAU,UAAU;AACpB,eAAK,UAAU;AACf,mBAAS;AACT,cAAI,QAAQ,GAAG;AACX,oBAAQ,CAAC;AACT,iBAAK;AAAA,UACT;AAAA,QACJ;AACA;AAAA,MACJ,KAAK;AACD,aAAK;AACL,iBAAS;AACT,YAAI,QAAQ,GAAG;AACX,mBAAS;AACT,kBAAQ,CAAC;AACT,eAAK;AAAA,QACT;AACA,YAAI,qBAAqB;AACrB,oBAAU,UAAU;AACpB,eAAK,UAAU;AACf,oBAAU;AACV,cAAI,SAAS,GAAG;AACZ,qBAAS,CAAC;AACV,iBAAK;AAAA,UACT;AAAA,QACJ;AACA;AAAA,MACJ,KAAK;AACD,YAAI,qBAAqB;AACrB,oBAAU,CAAC,UAAU;AAAA,QACzB;AACA,aAAK;AACL,kBAAU;AACV,iBAAS;AACT,YAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,mBAAS;AACT,kBAAQ,CAAC;AACT,mBAAS,CAAC;AACV,eAAK;AACL,eAAK;AAAA,QACT,WACS,QAAQ,GAAG;AAChB,mBAAS;AACT,kBAAQ,CAAC;AACT,eAAK;AAAA,QACT,WACS,SAAS,GAAG;AACjB,mBAAS;AACT,mBAAS,CAAC;AACV,eAAK;AAAA,QACT;AACA;AAAA,MACJ,KAAK;AACD,YAAI,qBAAqB;AACrB,oBAAU,UAAU;AAAA,QACxB;AACA,aAAK;AACL,aAAK;AACL,iBAAS;AACT,kBAAU;AACV,YAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,mBAAS;AACT,kBAAQ,CAAC;AACT,mBAAS,CAAC;AACV,eAAK;AACL,eAAK;AAAA,QACT,WACS,QAAQ,GAAG;AAChB,mBAAS;AACT,kBAAQ,CAAC;AACT,eAAK;AAAA,QACT,WACS,SAAS,GAAG;AACjB,mBAAS;AACT,mBAAS,CAAC;AACV,eAAK;AAAA,QACT;AACA;AAAA,MACJ,KAAK;AACD,YAAI,qBAAqB;AACrB,oBAAU,UAAU;AAAA,QACxB;AACA,iBAAS;AACT,kBAAU;AACV,YAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,mBAAS;AACT,kBAAQ,CAAC;AACT,mBAAS,CAAC;AACV,eAAK;AACL,eAAK;AAAA,QACT,WACS,QAAQ,GAAG;AAChB,mBAAS;AACT,kBAAQ,CAAC;AACT,eAAK;AAAA,QACT,WACS,SAAS,GAAG;AACjB,mBAAS;AACT,mBAAS,CAAC;AACV,eAAK;AAAA,QACT;AACA;AAAA,MACJ,KAAK;AACD,YAAI,qBAAqB;AACrB,oBAAU,CAAC,UAAU;AAAA,QACzB;AACA,aAAK;AACL,iBAAS;AACT,kBAAU;AACV,YAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,mBAAS;AACT,kBAAQ,CAAC;AACT,mBAAS,CAAC;AACV,eAAK;AACL,eAAK;AAAA,QACT,WACS,QAAQ,GAAG;AAChB,mBAAS;AACT,kBAAQ,CAAC;AACT,eAAK;AAAA,QACT,WACS,SAAS,GAAG;AACjB,mBAAS;AACT,mBAAS,CAAC;AACV,eAAK;AAAA,QACT;AACA;AAAA,IACR;AACA,QAAI,SAAS;AACT,cAAQ,WAAW,MAAM;AAAA,IAC7B;AACA,WAAO,KAAK,QAAQ,GAAG,GAAG,OAAO,MAAM;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,OAAO,GAAG,GAAG;AACf,QAAI,CAAC,KAAK,YAAY,UAAU,GAAG;AAC/B,aAAO;AAAA,IACX;AACA,QAAI,QAAQ,GAAG;AACX,cAAQ,KAAK,IAAI;AAAA,IACrB,OACK;AACD,eAAS;AAAA,IACb;AACA,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,WAAW,QAAQ;AACzB,UAAM,YAAY,SAAS;AAC3B,QAAI,OAAO,KAAK;AAChB,QAAI,OAAO,KAAK;AAChB,QAAI,SAAS,CAAC,KAAK,SAAS,CAAC,GAAG;AAC5B,eAAS,WAAW,WAAW,IAAI,KAAK,KAAK;AAC7C,eAAS,YAAY,YAAY,IAAI,KAAK,KAAK;AAAA,IACnD,OACK;AAED,eAAS,WAAW,SAAS;AAC7B,eAAS,YAAY,UAAU;AAAA,IACnC;AACA,WAAO,KAAK,QAAQ,MAAM,MAAM,UAAU,SAAS;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ,GAAG,GAAG,QAAQ,KAAK,OAAO,SAAS,KAAK,QAAQ,cAAc,KAAK,aAAa,SAAS,OAAO;AACpG,QAAI,KAAK,aACF,CAAC,SAAS,CAAC,KACX,CAAC,SAAS,CAAC,KACX,CAAC,SAAS,KAAK,KACf,CAAC,SAAS,MAAM,KAChB,QAAQ,KACR,SAAS,GAAG;AACf,aAAO;AAAA,IACX;AACA,QAAI,iBAAiB,WAAW,GAAG;AAC/B,OAAC,EAAE,OAAO,OAAO,IAAI,iBAAiB,EAAE,aAAa,OAAO,OAAO,GAAG,OAAO;AAAA,IACjF;AACA,QAAI,CAAC,KAAK,SAAS;AACf,UAAI,KAAK,MAAM,CAAC;AAChB,UAAI,KAAK,MAAM,CAAC;AAChB,cAAQ,KAAK,MAAM,KAAK;AACxB,eAAS,KAAK,MAAM,MAAM;AAAA,IAC9B;AACA,QAAI,MAAM,KAAK,KACR,MAAM,KAAK,KACX,UAAU,KAAK,SACf,WAAW,KAAK,UAChB,OAAO,GAAG,aAAa,KAAK,WAAW,KACvC,CAAC,QAAQ;AACZ,aAAO;AAAA,IACX;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,SAAS;AAAA,IAClB;AACA,QAAI,KAAK,MAAM,cAAc;AAAA,MACzB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC,MAAM,OAAO;AACV,aAAO;AAAA,IACX;AACA,SAAK,YAAY;AACjB,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACL,UAAM,EAAE,GAAG,GAAG,OAAO,OAAQ,IAAI,KAAK;AACtC,WAAO,KAAK,QAAQ,GAAG,GAAG,OAAO,MAAM;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACL,SAAK,QAAQ,GAAG,GAAG,GAAG,GAAG,KAAK,IAAI;AAClC,SAAK,SAAS;AACd,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACN,WAAO,KAAK,WAAW;AAAA,MACnB,WAAW,aAAa,KAAK,CAAC,OAAO,KAAK,CAAC;AAAA,MAC3C,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,IACjB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,UAAU,SAAS;AACf,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UAAI,CAAC,KAAK,aAAa;AACnB,eAAO,IAAI,MAAM,kDAAkD,CAAC;AACpE;AAAA,MACJ;AACA,YAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,UAAI,EAAE,OAAO,OAAO,IAAI;AACxB,UAAI,QAAQ;AACZ,UAAI,cAAc,OAAO,MACjB,iBAAiB,QAAQ,KAAK,KAAK,iBAAiB,QAAQ,MAAM,IAAI;AAC1E,SAAC,EAAE,OAAO,OAAO,IAAI,iBAAiB;AAAA,UAClC,aAAa,QAAQ;AAAA,UACrB,OAAO,QAAQ;AAAA,UACf,QAAQ,QAAQ;AAAA,QACpB,CAAC;AACD,gBAAQ,QAAQ,KAAK;AAAA,MACzB;AACA,aAAO,QAAQ;AACf,aAAO,SAAS;AAChB,UAAI,CAAC,KAAK,SAAS;AACf,gBAAQ,MAAM;AACd;AAAA,MACJ;AACA,YAAM,eAAe,KAAK,QAAQ,cAAc,KAAK,cAAc,aAAa,CAAC;AACjF,UAAI,CAAC,cAAc;AACf,gBAAQ,MAAM;AACd;AAAA,MACJ;AACA,mBAAa,OAAO,EAAE,KAAK,CAAC,UAAU;AAClC,cAAM,UAAU,OAAO,WAAW,IAAI;AACtC,YAAI,SAAS;AACT,gBAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI,aAAa,cAAc;AACtD,gBAAM,UAAU,CAAC,KAAK;AACtB,gBAAM,UAAU,CAAC,KAAK;AACtB,gBAAM,cAAe,UAAU,IAAM,IAAI,YAAc,IAAI,IAAM,IAAI;AACrE,gBAAM,cAAe,UAAU,IAAM,IAAI,YAAc,IAAI,IAAM,IAAI;AACrE,cAAI,OAAO,IAAI,aAAa,IAAI,aAAa;AAC7C,cAAI,OAAO,IAAI,aAAa,IAAI,aAAa;AAC7C,cAAI,YAAY,MAAM;AACtB,cAAI,aAAa,MAAM;AACvB,cAAI,UAAU,GAAG;AACb,oBAAQ;AACR,oBAAQ;AACR,yBAAa;AACb,0BAAc;AAAA,UAClB;AACA,gBAAM,UAAU,YAAY;AAC5B,gBAAM,UAAU,aAAa;AAC7B,kBAAQ,YAAY;AACpB,kBAAQ,SAAS,GAAG,GAAG,OAAO,MAAM;AACpC,cAAI,cAAc,OAAO,KAAK,WAAW,QAAQ,UAAU,GAAG;AAC1D,oBAAQ,WAAW,KAAK,MAAM,SAAS,MAAM;AAAA,UACjD;AACA,kBAAQ,KAAK;AAGb,kBAAQ,UAAU,SAAS,OAAO;AAClC,kBAAQ,UAAU,GAAG,GAAG,GAAG,GAAG,MAAM,IAAI;AAExC,kBAAQ,UAAU,CAAC,SAAS,CAAC,OAAO;AACpC,kBAAQ,UAAU,OAAO,GAAG,GAAG,WAAW,UAAU;AACpD,kBAAQ,QAAQ;AAAA,QACpB;AACA,gBAAQ,MAAM;AAAA,MAClB,CAAC,EAAE,MAAM,MAAM;AAAA,IACnB,CAAC;AAAA,EACL;AACJ;AACA,iBAAiB,QAAQ;AACzB,iBAAiB,WAAW;;;AC9zB5B,IAAIC,SAAQ;AAEZ,IAAM,cAAN,cAA0B,eAAe;AAAA,EACrC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,SAASA;AACd,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,MAAM,mBAAmB,OAAO;AAAA,MACnC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,yBAAyB,MAAM,UAAU,UAAU;AAC/C,QAAI,OAAO,GAAG,UAAU,QAAQ,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,yBAAyB,MAAM,UAAU,QAAQ;AACvD,QAAI,SAAS,UAAU,SAAS,WAAW;AACvC,WAAK,UAAU,MAAM;AACjB,aAAK,QAAQ;AAAA,MACjB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,UAAU;AACN,UAAM,SAAS,KAAK,eAAe;AACnC,UAAM,WAAW,SAAS,uBAAuB;AACjD,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,KAAK,GAAG;AACnC,YAAM,MAAM,SAAS,cAAc,MAAM;AACzC,UAAI,aAAa,QAAQ,KAAK;AAC9B,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,KAAK,GAAG;AACtC,cAAM,SAAS,SAAS,cAAc,MAAM;AAC5C,eAAO,aAAa,QAAQ,UAAU;AACtC,YAAI,YAAY,MAAM;AAAA,MAC1B;AACA,eAAS,YAAY,GAAG;AAAA,IAC5B;AACA,QAAI,QAAQ;AACR,aAAO,YAAY;AACnB,aAAO,YAAY,QAAQ;AAAA,IAC/B;AAAA,EACJ;AACJ;AACA,YAAY,QAAQ;AACpB,YAAY,WAAW;;;ACxDvB,IAAIC,SAAQ;AAEZ,IAAM,mBAAN,cAA+B,eAAe;AAAA,EAC1C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,SAASA;AACd,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,MAAM,mBAAmB,OAAO;AAAA,MACnC;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AACA,iBAAiB,QAAQ;AACzB,iBAAiB,WAAW;;;ACjB5B,IAAIC,SAAQ;AAEZ,IAAMC,eAAc,oBAAI,QAAQ;AAChC,IAAM,aAAa,oBAAI,QAAQ;AAC/B,IAAM,iBAAiB,oBAAI,QAAQ;AACnC,IAAM,mBAAmB,oBAAI,QAAQ;AACrC,IAAM,cAAc;AACpB,IAAM,oBAAoB;AAC1B,IAAM,kBAAkB;AACxB,IAAM,cAAc;AACpB,IAAM,gBAAN,cAA4B,eAAe;AAAA,EACvC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,0BAA0B;AAC/B,SAAK,SAAS;AACd,SAAK,SAASD;AACd,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,IAAI,OAAO,SAAS;AAChB,eAAW,IAAI,MAAM,OAAO;AAAA,EAChC;AAAA,EACA,IAAI,SAAS;AACT,WAAO,WAAW,IAAI,IAAI;AAAA,EAC9B;AAAA,EACA,IAAI,aAAa,SAAS;AACtB,qBAAiB,IAAI,MAAM,OAAO;AAAA,EACtC;AAAA,EACA,IAAI,eAAe;AACf,WAAO,iBAAiB,IAAI,IAAI;AAAA,EACpC;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,IAAAC,aAAY,IAAI,MAAM,OAAO;AAAA,EACjC;AAAA,EACA,IAAI,UAAU;AACV,WAAOA,aAAY,IAAI,IAAI;AAAA,EAC/B;AAAA,EACA,IAAI,WAAW,SAAS;AACpB,mBAAe,IAAI,MAAM,OAAO;AAAA,EACpC;AAAA,EACA,IAAI,aAAa;AACb,WAAO,eAAe,IAAI,IAAI;AAAA,EAClC;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,MAAM,mBAAmB,OAAO;AAAA,MACnC;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,QAAI,aAAa;AACjB,QAAI,KAAK,WAAW;AAChB,mBAAa,KAAK,cAAc,cAAc,KAAK,SAAS;AAAA,IAChE,OACK;AACD,mBAAa,KAAK,QAAQ,KAAK,cAAc,iBAAiB,CAAC;AAAA,IACnE;AACA,QAAI,UAAU,UAAU,GAAG;AACvB,WAAK,aAAa;AAClB,WAAK,qBAAqB,KAAK,uBAAuB,KAAK,IAAI;AAC/D,SAAG,YAAY,cAAc,KAAK,kBAAkB;AACpD,YAAM,UAAU,WAAW,QAAQ,KAAK,cAAc,cAAc,CAAC;AACrE,UAAI,SAAS;AACT,aAAK,UAAU;AACf,cAAM,eAAe,QAAQ,cAAc,KAAK,cAAc,aAAa,CAAC;AAC5E,YAAI,cAAc;AACd,eAAK,eAAe;AACpB,eAAK,SAAS,aAAa,UAAU,IAAI;AACzC,eAAK,eAAe,EAAE,YAAY,KAAK,MAAM;AAC7C,eAAK,qBAAqB,KAAK,uBAAuB,KAAK,IAAI;AAC/D,eAAK,0BAA0B,KAAK,4BAA4B,KAAK,IAAI;AACzE,aAAG,aAAa,QAAQ,YAAY,KAAK,kBAAkB;AAC3D,aAAG,cAAc,iBAAiB,KAAK,uBAAuB;AAAA,QAClE;AAAA,MACJ;AACA,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,UAAM,EAAE,YAAY,aAAa,IAAI;AACrC,QAAI,cAAc,KAAK,oBAAoB;AACvC,UAAI,YAAY,cAAc,KAAK,kBAAkB;AACrD,WAAK,qBAAqB;AAAA,IAC9B;AACA,QAAI,gBAAgB,KAAK,oBAAoB;AACzC,UAAI,aAAa,QAAQ,YAAY,KAAK,kBAAkB;AAC5D,WAAK,qBAAqB;AAAA,IAC9B;AACA,QAAI,gBAAgB,KAAK,yBAAyB;AAC9C,UAAI,cAAc,iBAAiB,KAAK,uBAAuB;AAC/D,WAAK,0BAA0B;AAAA,IACnC;AACA,UAAM,qBAAqB;AAAA,EAC/B;AAAA,EACA,uBAAuB,OAAO;AAC1B,SAAK,QAAQ,MAAM,MAAM;AAAA,EAC7B;AAAA,EACA,yBAAyB;AACrB,UAAM,EAAE,QAAQ,aAAa,IAAI;AACjC,UAAM,SAAS,OAAO,aAAa,KAAK;AACxC,UAAM,SAAS,aAAa,aAAa,KAAK;AAC9C,QAAI,UAAU,WAAW,QAAQ;AAC7B,aAAO,aAAa,OAAO,MAAM;AACjC,aAAO,OAAO,MAAM;AAChB,mBAAW,MAAM;AACb,eAAK,QAAQ;AAAA,QACjB,GAAG,EAAE;AAAA,MACT,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,4BAA4B,OAAO;AAC/B,SAAK,QAAQ,QAAW,MAAM,OAAO,MAAM;AAAA,EAC/C;AAAA,EACA,QAAQ,WAAW,QAAQ;AACvB,UAAM,EAAE,SAAS,WAAW,IAAI;AAChC,QAAI,CAAC,aAAa,CAAC,WAAW,QAAQ;AAClC,kBAAY;AAAA,IAChB;AACA,QAAI,CAAC,aAAc,UAAU,MAAM,KAC5B,UAAU,MAAM,KAChB,UAAU,UAAU,KACpB,UAAU,WAAW,GAAI;AAC5B,kBAAY;AAAA,QACR,GAAG;AAAA,QACH,GAAG;AAAA,QACH,OAAO,QAAQ;AAAA,QACf,QAAQ,QAAQ;AAAA,MACpB;AAAA,IACJ;AACA,UAAM,EAAE,GAAG,GAAG,OAAO,OAAQ,IAAI;AACjC,UAAM,SAAS,CAAC;AAChB,UAAM,EAAE,aAAa,aAAa,IAAI;AACtC,QAAI,WAAW;AACf,QAAI,YAAY;AAChB,QAAI,QAAQ;AACZ,YAAQ,KAAK,QAAQ;AAAA,MACjB,KAAK;AACD,gBAAQ;AACR,mBAAW;AACX,oBAAY;AACZ,eAAO,QAAQ;AACf,eAAO,SAAS;AAChB;AAAA,MACJ,KAAK;AACD,gBAAQ,SAAS,IAAI,eAAe,SAAS;AAC7C,mBAAW,QAAQ;AACnB,eAAO,QAAQ;AACf;AAAA,MACJ,KAAK;AACD,gBAAQ,QAAQ,IAAI,cAAc,QAAQ;AAC1C,oBAAY,SAAS;AACrB,eAAO,SAAS;AAChB;AAAA,MACJ,KAAK;AAAA,MACL;AACI,YAAI,cAAc,GAAG;AACjB,kBAAQ,QAAQ,IAAI,cAAc,QAAQ;AAAA,QAC9C,WACS,eAAe,GAAG;AACvB,kBAAQ,SAAS,IAAI,eAAe,SAAS;AAAA,QACjD;AAAA,IACR;AACA,SAAK,SAAS;AACd,SAAK,WAAW,MAAM;AACtB,QAAI,KAAK,cAAc;AACnB,WAAK,wBAAwB,WAAW,QAAQ,WAAW,SAAS,SAAS,KAAK,aAAa,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC;AAAA,IAC1H;AAAA,EACJ;AAAA,EACA,wBAAwB,QAAQ,GAAG,GAAG;AAClC,UAAM,EAAE,QAAQ,QAAQ,aAAc,IAAI;AAC1C,QAAI,gBAAgB,UAAU,UAAU,GAAG;AACvC,YAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI;AAC3B,YAAM,cAAe,IAAI,IAAM,IAAI,MAAQ,IAAI,IAAM,IAAI;AACzD,YAAM,cAAe,IAAI,IAAM,IAAI,MAAQ,IAAI,IAAM,IAAI;AACzD,YAAM,OAAO,IAAI,aAAa,IAAI,aAAa;AAC/C,YAAM,OAAO,IAAI,aAAa,IAAI,aAAa;AAC/C,aAAO,OAAO,CAAC,UAAU;AACrB,aAAK,WAAW,KAAK,QAAQ;AAAA,UACzB,OAAO,MAAM,eAAe;AAAA,UAC5B,QAAQ,MAAM,gBAAgB;AAAA,QAClC,CAAC;AAAA,MACL,CAAC;AACD,aAAO,cAAc,GAAG,GAAG,GAAG,GAAG,OAAO,QAAQ,OAAO,MAAM;AAAA,IACjE;AAAA,EACJ;AACJ;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;;;AC5LzB,IAAI,mBAAoB;AAmBxB,IAAM,0BAA0B;AAChC,IAAM,sBAAsB;AAC5B,IAAM,kBAAkB;AAAA,EACpB,UAAU;AACd;AACA,cAAc,QAAQ;AACtB,iBAAiB,QAAQ;AACzB,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB,aAAa,QAAQ;AACrB,iBAAiB,QAAQ;AACzB,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,IAAM,UAAN,MAAc;AAAA,EACV,YAAY,SAAS,SAAS;AAC1B,SAAK,UAAU;AACf,QAAI,SAAS,OAAO,GAAG;AACnB,gBAAU,SAAS,cAAc,OAAO;AAAA,IAC5C;AACA,QAAI,CAAC,UAAU,OAAO,KAAK,CAAC,wBAAwB,KAAK,QAAQ,SAAS,GAAG;AACzE,YAAM,IAAI,MAAM,0EAA0E;AAAA,IAC9F;AACA,SAAK,UAAU;AACf,cAAU,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,eAAe,GAAG,OAAO;AACnE,SAAK,UAAU;AACf,UAAM,EAAE,cAAc,IAAI;AAC1B,QAAI,EAAE,UAAU,IAAI;AACpB,QAAI,WAAW;AACX,UAAI,SAAS,SAAS,GAAG;AACrB,oBAAY,cAAc,cAAc,SAAS;AAAA,MACrD;AACA,UAAI,CAAC,UAAU,SAAS,GAAG;AACvB,cAAM,IAAI,MAAM,gEAAgE;AAAA,MACpF;AAAA,IACJ;AACA,QAAI,CAAC,UAAU,SAAS,GAAG;AACvB,UAAI,QAAQ,eAAe;AACvB,oBAAY,QAAQ;AAAA,MACxB,OACK;AACD,oBAAY,cAAc;AAAA,MAC9B;AAAA,IACJ;AACA,SAAK,YAAY;AACjB,UAAM,UAAU,QAAQ;AACxB,QAAI,MAAM;AACV,QAAI,YAAY,OAAO;AACnB,OAAC,EAAE,IAAI,IAAI;AAAA,IACf,WACS,YAAY,YAAY,OAAO,mBAAmB;AACvD,YAAM,QAAQ,UAAU;AAAA,IAC5B;AACA,UAAM,EAAE,SAAS,IAAI;AACrB,QAAI,YAAY,SAAS,QAAQ,GAAG;AAChC,YAAM,kBAAkB,SAAS,cAAc,UAAU;AACzD,YAAM,mBAAmB,SAAS,uBAAuB;AACzD,sBAAgB,YAAY,SAAS,QAAQ,qBAAqB,YAAY;AAC9E,uBAAiB,YAAY,gBAAgB,OAAO;AACpD,YAAM,KAAK,iBAAiB,iBAAiB,aAAa,CAAC,EAAE,QAAQ,CAAC,UAAU;AAC5E,cAAM,aAAa,OAAO,GAAG;AAC7B,cAAM,aAAa,OAAO,QAAQ,OAAO,mBAAmB;AAAA,MAChE,CAAC;AACD,UAAI,QAAQ,eAAe;AACvB,gBAAQ,MAAM,UAAU;AACxB,kBAAU,aAAa,kBAAkB,QAAQ,WAAW;AAAA,MAChE,OACK;AACD,kBAAU,YAAY,gBAAgB;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK,UAAU,cAAc,cAAc;AAAA,EACtD;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK,UAAU,cAAc,aAAa;AAAA,EACrD;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,UAAU,cAAc,iBAAiB;AAAA,EACzD;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK,UAAU,iBAAiB,iBAAiB;AAAA,EAC5D;AACJ;AACA,QAAQ,UAAU;",
  "names": ["style", "style", "style", "canvasCache", "style", "style", "canvasCache", "style", "style", "style", "canvasCache"]
}
